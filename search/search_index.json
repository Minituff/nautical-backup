{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>    A simple Docker volume backup tool.    </p> <p></p>"},{"location":"arguments/","title":"Environment Variables","text":"<p>Nautical provides configuration in the form of Docker environment variables.</p> <p>See the Installation Section, which contains a few examples of applying environment variables.</p>"},{"location":"arguments/#environment-variable-vs-label-priority","title":"Environment Variable vs Label Priority","text":"<p>If a container has an Environment Variable applied as well as a conflicting Label, then:</p> <p>The container Label takes priority over the global Nautical environment variable.</p>"},{"location":"arguments/#time-zone","title":"Time Zone","text":"<p>Sets the time-zone to be used by the CRON schedule. If this environment variable is not set, Nautical will use the default time-zone: <code>Etc/UTC</code>.</p> <p>To change the time-zone, see this Wikipedia page, find your location and use the value in <code>TZ Database Name</code>, e.g <code>America/Los_Angeles</code>.</p> <p>Default: Etc/UTC</p> <p><pre><code>TZ=America/Los_Angeles\n</code></pre> To verify the correct time-zone, use the command <code>docker exec nautical-backup date</code></p>"},{"location":"arguments/#cron-schedule","title":"CRON Schedule","text":"<p>Allow changing the schedule for when the backup is started.</p> <p>Default: 0 4 * * *</p> <pre><code>CRON_SCHEDULE=0 4 * * *\n</code></pre>"},{"location":"arguments/#enabledisable-cron-schedule","title":"Enable/Disable CRON Schedule","text":"<p>Completely disable the recurring backup via a CRON schedule.</p> <p>This could be useful if you want to run Nautical manually via Backup On Start or the Rest API.</p> <p>Default: true (CRON enabled)</p> <pre><code>CRON_SCHEDULE_ENABLED=false\n</code></pre>"},{"location":"arguments/#create-a-dated-destination-folder","title":"Create a Dated Destination Folder","text":"<p>This option will tell Nautical to create a new destination folder on backup.</p> <p>For example: <code>/dest_folder/2024-04-05/contianer</code></p> <p>Default: false</p> <pre><code>USE_DEST_DATE_FOLDER=true\n</code></pre>"},{"location":"arguments/#destination-folder-format","title":"Destination Folder Format","text":"<p>Use the Python time.strftime() module to format format the destination folder's name.</p> <p>Default: %Y-%m-%d (2024-04-05 for example)</p> <p>Format: Python time.strftime() format</p> <pre><code>DEST_DATE_FORMAT=Nautical_Backup-%Y-%m-%d\n</code></pre> <p>You are allowed to use almost anything in this field</p> <p>While it may be a intended to use the date format here, you don't have to. You could set this value to <code>latest backup</code> or insert addional text around the date format like this: <code>Nautical Backup - %Y-%m-%d</code>. Use this setting to add a prefix and/or suffix to the dated folder.</p> <p>NOTE: Some linux machines may have issues with spaces in this field. It is recommended you use underscores <code>_</code> instead of spaces when possible.</p>"},{"location":"arguments/#destination-folder-path","title":"Destination Folder Path","text":"<p>Use this option to designate which path strategy is used when creating a dated destination directory.</p> <ul> <li><code>date/container</code> = /dest_folder/<code>2024-04-05</code>/container1</li> <li><code>container/date</code> = /dest_folder/container1/<code>2024-04-05</code></li> </ul> <p>Default: date/container</p> <p>Options: <code>container/date</code> or <code>date/container</code></p> <pre><code>DEST_DATE_PATH_FORMAT=date/container\n</code></pre>"},{"location":"arguments/#container-backup-date-vs-nautical-start-date","title":"Container Backup Date vs Nautical Start Date","text":"<p>Use the precise date for formatting the destination folder When <code>false</code>, use the time Nautical started the backup (not when the container was backed up).</p> <p>Default: false</p> <pre><code>USE_CONTAINER_BACKUP_DATE=true\n</code></pre> Understanding <code>USE_CONTAINER_BACKUP_DATE</code>. <p>Let's say you have the following format: <code>DEST_DATE_FORMAT=%Y-%m-%d_%H-%M-%S</code></p> <p>Since the timing is so precise (using seconds) we may get a result like this: <pre><code>-- src\n|-- 2024-11-24_14-26-43\n|-- 2024-11-24_14-26-44\n|-- 2024-11-24_14-28-10\n</code></pre></p> <p>But what we actually want is a result like this: <pre><code>-- src\n|-- 2024-11-24_14-26-43\n#  (1)\n|-- 2024-11-24_14-28-10\n</code></pre></p> <ol> <li>The folder that was here is now within in <code>2024-11-24_14-26-43</code> folder</li> </ol> <p>By setting <code>USE_CONTAINER_BACKUP_DATE=false</code>, then the date used will be the time Nautical actually started, not the time when each container is processed. Meaning that even if the containers take a few minutes to backup, the folder format will remain the same for each of them.</p>"},{"location":"arguments/#additional-folders","title":"Additional Folders","text":"<p>Allows Nautical to backup folders that are not associated with containers.</p> <p>The additional folders must either exist or be mounted into the <code>app/source</code> folder within Nautical.</p> <p>Default: empty (no additional folders)</p> <p>Format: <code>&lt;folder_name&gt;</code> (comma separated for multiple items)</p> <pre><code>ADDITIONAL_FOLDERS=folder1,folder_name2\n</code></pre>"},{"location":"arguments/#when-to-backup-additional-folders","title":"When to backup additional folders?","text":"<p>Use this setting to decide if the additional folders are backed up before or after the containers.</p> <p>Default: before</p> <p>Options: before, after</p> <pre><code>ADDITIONAL_FOLDERS_WHEN=after\n</code></pre> Additional Folders Example <p>This example shows us how to add two additional folders to our backup that are not associated with a container. Here, the additional folders will be backed up first, followed by any containers Nautical finds.</p> <p>The <code>additional2</code> folder already exists within the <code>/opt/volume-data</code> so it does not need a mount point.</p> <pre><code>services:\n  nautical-backup:\n    image: minituff/nautical-backup:2.14\n    container_name: nautical-backup\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - /config:/config\n      - /opt/volume-data:/app/source #(4)!\n      - /mnt/nfs-share/backups:/app/destination\n      - /mnt/additional:/app/source/additional #(1)!\n    environment:\n      - ADDITIONAL_FOLDERS=additional,additional2 #(2)!\n      - ADDITIONAL_FOLDERS_WHEN=before #(3)!\n</code></pre> <ol> <li>Mount <code>additional</code> inside the <code>/app/source</code> directory in the container</li> <li>Tell Nautical to process both the <code>additional</code> and <code>additional2</code> folders</li> <li>Tell Nautical when to backup the additional folders.         * <code>before</code> is the default</li> <li>The <code>additional2</code> folder already exists within the <code>/opt/volume-data</code> so it does not need a mount point.</li> </ol> <p>If the same folder is named in the Additional Folders label and a service env variable--it will be backed up twice.</p> <p>\ud83d\udd04 This is the same action as the Additional Folders label, but applied globally.</p>"},{"location":"arguments/#additional-folders-date-format","title":"Additional folders date format","text":"<p>To enable the Dated Destination folder syntax for Global Additional folders (not folders tied to containers), then use this variable.</p> <p>Default: false (use the base destination folder)</p> <pre><code>ADDITIONAL_FOLDERS_USE_DEST_DATE_FOLDER=true\n</code></pre> <p>The destination folder format and destination folder path enviornment variables will be respected.</p>"},{"location":"arguments/#secondary-destination-locations","title":"Secondary Destination Locations","text":"<p>Tell Nautical to backup folders to more destination locations--in addition to the normal destination folder (/app/destination).</p> <p>This is a path inside the Nautical container.</p> <p>Default: empty (no secondary locations)</p> <p>Format: <code>&lt;absolute paths&gt;</code> (comma separated for multiple items)</p> <pre><code>SECONDARY_DEST_DIRS=/path/one,/path/two\n</code></pre> Example 1 <p>Pay attention to the newly added highlighed lines:</p> <pre><code>services:\n  nautical-backup:\n    image: minituff/nautical-backup:2.14\n    container_name: nautical-backup\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - /config:/config\n      - /opt/volume-data:/app/source\n      - /mnt/nfs-share/backups:/app/destination\n      - /mnt/nfs-share/destination1:/nautical/destination1 #(1)!\n      - /another/path:/nautical/destination2 #(2)!\n      environment:\n      - SECONDARY_DEST_DIRS=/nautical/destination1,/nautical/destination2 #(3)!\n</code></pre> <ol> <li>Mount <code>/nautical/destination1</code> directory in the container</li> <li>Mount <code>/nautical/destination2</code> directory in the contianer</li> <li>Tell Nautical to copy files to these two locations:<ul> <li><code>/nautical/destination1</code> which actually goes to <code>/mnt/nfs-share/destination1</code> on the host machine</li> <li><code>/nautical/destination2</code> which actually goes to <code>/another/path</code> on the host machine</li> </ul> </li> </ol> <p>Additional Folders will also be copied to these secondary locations.</p>"},{"location":"arguments/#skip-containers","title":"Skip Containers","text":"<p>Tell Nautical to skip backup of containers in this list.</p> <p>This list can either be the container <code>name</code> or full <code>id</code>.</p> <p>Default: empty (no skips)</p> Example 1Example 2 <pre><code>SKIP_CONTAINERS=container-name1,container-name2,container-name3\n</code></pre> <pre><code>SKIP_CONTAINERS=container-name1,056bd2e970c1338782733fdbf1009c6e158c715d0d105b11de88bd549430e7f5\n</code></pre> <p>Getting the full container ID</p> <p>Usually, it's easier to just use the <code>container-name</code>, but if you need to use the full ID, these commands will help:</p> <ul> <li><code>docker ps --no-trunc</code></li> <li><code>docker inspect &lt;container name&gt;</code></li> </ul> <p>\ud83d\udd04 This is the same action as the Disable Nautical label, but applied globally.</p>"},{"location":"arguments/#require-label","title":"Require Label","text":"<p>Require the Docker Label <code>nautical-backup.enable=true</code> to be present on each container or it will be skipped.</p> <p>Default: false</p> <pre><code>REQUIRE_LABEL=true\n</code></pre> <p>See the Enable or Disable Nautical Label Section for more details.</p>"},{"location":"arguments/#multi-instance-label-prefix","title":"Multi-Instance Label Prefix","text":"<p>Sometimes, running multiple insances of nautical-backup can enable extra funcunality: such as unique CRON schedules for different containers, etc.</p> <p>By default, nautical-backup will only scan containers having labels starting with <code>nautical-backup.*</code>. To be able to run multiple instances of nautical-backup, you may want to customize the label prefix to avoid colision among instances.</p> <p>Default: nautical-backup</p> <pre><code>services:\n  # Multiple instance of nautical\n  nautical-inst1:\n    environment:\n      - LABEL_PREFIX=nautical-backup.inst1\n  nautical-inst2:\n    environment:\n      - LABEL_PREFIX=nautical-backup.inst2\n\n  # Multi targets\n  backuped-inst1:\n    labels:\n      - nautical-backup.inst1.enable=true\n  backuped-inst2:\n    labels:\n      - nautical-backup.inst2.enable=true\n</code></pre>"},{"location":"arguments/#override-source-directory","title":"Override Source Directory","text":"<p>Allows a source directory and container-name that do not match.</p> <p>Default: empty (use container name)</p> <p>Format: <code>&lt;container-name&gt;:&lt;local source folder name&gt;</code> (comma separated for multiple items)</p> <p>Normally a container is backed up only when the <code>container-name</code> is the exact same as the <code>source folder name</code>.</p> Example 1Example 2Example 3 <p>For example, a container named <code>Pi.Alert</code> will be skipped with a source directory name of <code>pialert</code>. To fix this, we can override the source directory name so that it does not need to match the container name.</p> <pre><code>OVERRIDE_SOURCE_DIR=Pi.Alert:pialert\n</code></pre> <p>We can override multiple containers if we separate them with a comma. <pre><code>OVERRIDE_SOURCE_DIR=example1:example1-new-source-data,ctr2:ctr2-new-source\n</code></pre>  The example above would yield the following results:</p> Container Name Old Source Directory New Source Directory example1 <code>src/example1</code> <code>src/example1-new-source-data</code> ctr2 <code>src/ctr2</code> <code>src/ctr2-new-source</code> <p>We can use a nested folder by simply appending it to the source path <pre><code>OVERRIDE_SOURCE_DIR=example1:subfolder/example1\n</code></pre>  The example above would yield the following results:</p> Container Name Old Source Directory New Source Directory example1 <code>src/example1</code> <code>src/subfolder/example1</code> <p>\ud83d\udd04 This is the same action as the Override Source Directory label, but applied globally.</p>"},{"location":"arguments/#override-destination-directory","title":"Override Destination Directory","text":"<p>Changes the destination backup name to be something other than the container name.</p> <p>Default: empty (use container name)</p> <p>Format: <code>&lt;container-name&gt;:&lt;new destination folder name&gt;</code> (comma separated for multiple items)</p> <p>Normally, a container is backed to a folder with the same name as the <code>container-name</code>. </p> Example 1Example 2 <p>For example, let's say we have a container named <code>Pi.Alert</code>. By default, the container will be backed up to a folder named <code>Pi.Alert</code>. If we want to change this destination folder name to be <code>pialert</code>, we can do that using overrides.</p> <pre><code>OVERRIDE_DEST_DIR=Pi.Alert:pialert\n</code></pre> <pre><code>OVERRIDE_DEST_DIR=example1:example1-new-dest-data,ctr2:newdest\n</code></pre> <p> The example above would yield the following results:</p> Container Name Old Destination Directory New Destination Directory example1 <code>dest/example1</code> <code>dest/example1-new-dest-data</code> ctr2 <code>dest/ctr2</code> <code>dest/newdest</code> <p>\ud83d\udd04 This is the same action as the Override Destination Directory label, but applied globally.</p>"},{"location":"arguments/#execute-commands-before-or-after-backup","title":"Execute Commands before or after backup","text":"<p>Execute a command before or after backing up all the containers. This can be used to alert services before shutdown and/or ensure the services came online correctly.</p> <p>This command will run before/after the entire backup process is initiated.</p> <p>Default: empty (nothing will be done)</p> <p>FORMAT: The entirety of a <code>command</code></p> <pre><code>PRE_BACKUP_EXEC=/config/prepare-for-backup.sh\nPOST_BACKUP_EXEC=curl -d \"Backup successful \ud83d\ude00\" ntfy.sh/mytopic\n</code></pre> Test your <code>exec</code> <p>Before setting the variable/label, it is a good idea to ensure it works first. Here is an example.</p> <p>Ensure Nautical is running first, then run: <pre><code>docker exec -it nautical-backup \\\n  curl -X GET 'google.com'\n</code></pre> Note: You can only have 1 before and 1 after Curl Request. This applies to Nautical itself, not to each container.</p> Available Enviornment Variables Method Description <code>NB_EXEC_CONTAINER_NAME</code> The container name* <code>NB_EXEC_CONTAINER_ID</code> The contianer ID* <code>NB_EXEC_BEFORE_DURING_OR_AFTER</code> When is this command being. Options <code>NB_EXEC_COMMAND</code> The exact command exectuted <code>NB_EXEC_ATTACHED_TO_CONTAINER</code> Is this exec command attached to a container <code>NB_EXEC_TOTAL_ERRORS</code> The total errors on the last run+ <code>NB_EXEC_TOTAL_CONTAINERS_COMPLETED</code> The amount of containers processed successfully+ <code>NB_EXEC_TOTAL_CONTAINERS_SKIPPED</code> The amount of containers skipped (for any reason)+ <code>NB_EXEC_TOTAL_NUMBER_OF_CONTAINERS</code> The amount of containers Nautical looked at+ <p> * Require access to a container. Eg. When <code>NB_EXEC_ATTACHED_TO_CONTAINER=true</code> </p> <p> + Must be used <code>AFTER</code> so there are values to fill. Eg. When <code>nautical-backup.exec.after</code> </p> <p>\ud83d\udcb0 Tip: To use the enviornment variables in a docker-compose file, you will need to escape them with a double <code>$</code>: <pre><code>labels:\n  - \"nautical-backup.exec.before=echo name: $$NB_EXEC_CONTAINER_NAME\" # (1)!\n</code></pre></p> <ol> <li>Notice the double <code>$$</code></li> </ol> <p>\ud83d\udece\ufe0f Want any additional enviornment variables? Submit an issue.</p> Executing a script <p>If you need to run more than a simple one-liner, we can run an entire script instead. Here is a basic example:</p> <p>Create a file (we will name it <code>script.sh</code>) and place it in the mounted <code>/config</code> directory.</p> <p>Remember: We mounted the <code>/config</code> folder as part of the Installation.</p> <pre><code>#!/usr/bin/env bash\n\necho \"Hello from script.sh\"\n\n# Variable usage example\necho \"NB_EXEC_CONTAINER_NAME: $NB_EXEC_CONTAINER_NAME\" \necho \"NB_EXEC_CONTAINER_ID: $NB_EXEC_CONTAINER_ID\" \n</code></pre> <p>Give the file execution permission: <code>chmod +x /config/script.sh</code></p> <p>Test the script</p> <p>Ensure Nautical is running first, then run: <pre><code>docker exec -it nautical-backup \\\n  /bin/bash /config/script.sh\n</code></pre></p> <p>Add your script to the enviornment variable <pre><code>PRE_BACKUP_EXEC=/config/script.sh\n</code></pre></p> <p>\ud83d\udd04 This is the same action as the Execute Commands label, but applied globally (not per container).</p>"},{"location":"arguments/#report-file","title":"Report file","text":"<p>Enable or Disable the automatically generated report file.</p> <p>Default: true</p> <pre><code>REPORT_FILE=true\n</code></pre>"},{"location":"arguments/#skip-stopping-containers","title":"Skip Stopping Containers","text":"<p>Bypass stopping the container before performing a backup. This can be useful for containers with minimal configuration.</p> <p>Default: empty (no containers will be skipped)</p> <pre><code>SKIP_STOPPING=example1,example2\n</code></pre> <p>Not stopping containers can produce corrupt backups.</p> <p>Containers with databases--particularly SQL--need to be shutdown before backup.</p> <p>Only do this on containers you know for certain do not need to be shutdown before backup.</p> <p>\ud83d\udd04 This is the same action as the Stop Before Backup label, but applied globally.</p>"},{"location":"arguments/#stop-timeout","title":"Stop Timeout","text":"<p>Nautical will allow the container x amount of seconds to shutdown gracefully before killing the container.</p> <p>Default: 10 (seconds)</p> <pre><code>STOP_TIMEOUT=10\n</code></pre> <p>\ud83d\udd04 This is the same action as the Stop Timeout label, but applied globally.</p>"},{"location":"arguments/#backup-on-start","title":"Backup on Start","text":"<p>Nautical will immediately perform a backup when the container is started in addition to the CRON scheduled backup.</p> <p>Default: false</p> <pre><code>BACKUP_ON_START=true\n</code></pre> <p>The console Nautical backup logs will not be avilable until all the containers have been processed.</p> <p>This is due to a limitation in S6-Overlay.</p>"},{"location":"arguments/#run-once","title":"Run Once","text":"<p>This variable will tell Nautical to immediately quit after the first backup. If combined with Backup on Start, Nautical will immediately start a backup, then exit.</p> <p>Default: false</p> <pre><code>RUN_ONCE=true\n</code></pre> <p>Without Backup on Start, the CRON Schedule will call the backup and then Nautical will exit.</p>"},{"location":"arguments/#mirror-source-directory-name-to-destination","title":"Mirror Source Directory Name to Destination","text":"<p>Mirror the source folder name to the destination folder name. </p> <p>When using a source directory override, then the <code>KEEP_SRC_DIR_NAME=true</code> setting  (which is the default) will mean the destination directory will be the same as the source directory, without using a destination directory override.</p> <p>If a destination directory override is applied for a container, then the override will be used instead of mirroring the source name, regardless of the <code>KEEP_SRC_DIR_NAME</code> setting. </p> <p>Default: true</p> <pre><code>KEEP_SRC_DIR_NAME=false\n</code></pre> Example 1Example 2Example 3 <pre><code>OVERRIDE_SOURCE_DIR=Pi.Alert:pialert\n</code></pre> <p>Here we override the <code>source</code> folder to <code>Pi.Alert</code> to <code>pialert</code>, and since <code>KEEP_SRC_DIR_NAME=true</code>  (which is the default)  the <code>destination</code> folder will also be named <code>pialert</code>.</p> Container Name Source Directory Destination Directory Pi.Alert <code>src/pialert</code> <code>destination/pialert</code> <pre><code>KEEP_SRC_DIR_NAME=false\nOVERRIDE_SOURCE_DIR=Pi.Alert:pialert\n</code></pre> <p>Here we override the <code>source</code> folder to <code>Pi.Alert</code> to <code>pialert</code>, and since <code>KEEP_SRC_DIR_NAME=false</code> the <code>destination</code> folder will not be mirrored, so the container-name <code>Pi.Alert</code> will be used.</p> Container Name Source Directory Destination Directory Pi.Alert <code>src/pialert</code> <code>destination/Pi.Alert</code> <pre><code>OVERRIDE_SOURCE_DIR=Pi.Alert:pialert\nOVERRIDE_DEST_DIR=Pi.Alert:pialert-backup\n</code></pre> <p>Here we override the <code>source</code> folder to <code>Pi.Alert</code> to <code>pialert</code>.</p> <p>We also override the <code>destination</code> folder to <code>pialert-backup</code>.</p> <p>Since a destination override is used, the <code>KEEP_SRC_DIR_NAME</code> setting is not used for this container.</p> Container Name Source Directory Destination Directory Pi.Alert <code>src/Pi.Alert</code> <code>destination/pialert-backup</code> <p>\ud83d\udd04 This is the same action as the Mirror Source Directory Name to Destination label, but applied globally.</p>"},{"location":"arguments/#http-rest-api","title":"HTTP REST API","text":"<p>Enable or disable the Nautical API.</p> <p>Default: true</p> <pre><code>HTTP_REST_API_ENABLED=false\n</code></pre> <p>A quick note</p> <p>A <code>false</code> value doesn't completely disable the REST API service--it will only disable the logs stating the API starting.</p> <p>The REST API is used internally for Docker Healthchecks.  However, you do not open the port, then all the endpoints will remain unreachable. See the Nautical API section for more information.</p>"},{"location":"arguments/#api-username-and-password","title":"API Username and Password","text":"<p>See API Section for examples how authenticating to the API.</p> <p>Default Username: admin</p> <p>Default Password: admin</p> <p>Format: string</p> <pre><code>HTTP_REST_API_USERNAME=admin\nHTTP_REST_API_PASSWORD=password\n</code></pre> <p>Setting the username and password to <code>\"\"</code> will not disable authentication. A login is always required.</p>"},{"location":"arguments/#console-log-level","title":"Console Log Level","text":"<p>Set the console log level for the container.</p> <p>Default: INFO</p> <p>Options: TRACE, DEBUG, INFO, WARN, ERROR</p> <pre><code>LOG_LEVEL=INFO\n</code></pre>"},{"location":"arguments/#report-log-level","title":"Report Log Level","text":"<p>Set the log level for the generated report file. Only used if the report file is enabled.</p> <p>Default: INFO</p> <p>Options: TRACE, DEBUG, INFO, WARN, ERROR</p> <pre><code>REPORT_FILE_LOG_LEVEL=INFO\n</code></pre>"},{"location":"arguments/#use-report-file-on-backup-only","title":"Use Report File on Backup Only","text":"<p>With a value of <code>true</code>, then the report file will only be created when a backup is performed, not during Nautical initialization.</p> <p>With a value of <code>false</code>, then all logs will also be sent to the report file assuming they are the right log level.</p> <p>Default: true</p> <pre><code>REPORT_FILE_ON_BACKUP_ONLY=false\n</code></pre>"},{"location":"arguments/#use-default-rsync-arguments","title":"Use Default rsync Arguments","text":"<p>Use the default <code>rsync</code> arguments <code>-raq</code> (recursive, archive, quiet)</p> <p>Useful when using Custom rsync Arguments</p> <p>Default: true</p> <pre><code>USE_DEFAULT_RSYNC_ARGS=false\n</code></pre> <p>\ud83d\udd04 This is the same action as the Use Default rsync Arguments label, but applied globally.</p>"},{"location":"arguments/#custom-rsync-arguments","title":"Custom rsync Arguments","text":"<p>Apply custom <code>rsync</code> args (in addition to the default args)</p> <p>Default: empty (no custom rsync args will be applied)</p> <p>There are many <code>rsync</code> arguments that be be used here.</p> Custom rsync Arguments Example <pre><code># Don't backup any .log or any .txt files\nRSYNC_CUSTOM_ARGS=--exclude='*.log' --exclude='*.txt'\n</code></pre> <p>The <code>RSYNC_CUSTOM_ARGS</code> will be inserted after the <code>$DEFAULT_RSYNC_ARGS</code> as shown: <pre><code>rsync $DEFAULT_RSYNC_ARGS $RSYNC_CUSTOM_ARGS $src_dir/ $dest_dir/\n</code></pre></p> <p>\ud83d\udd04 This is the same action as the Custom rsync Arguments label, but applied globally. </p>"},{"location":"docker-socket-proxy/","title":"Docker Socket Proxy","text":""},{"location":"docker-socket-proxy/#why","title":"Why?","text":"<p>The simple configuration is to pass the Docker socket straight into the Nautical container like this:</p> <ul> <li><code>/var/run/docker.sock:/var/run/docker.sock</code></li> </ul> <p>However, giving access to your Docker socket could mean giving root access to your host.  While Nautical needs some control of your Docker socket to inspect/start/stop/exec your containers, it does not need complete control. Using the Docker Socket Proxy allows you to remove permissions away from Nautical but still allow what's necessary.</p>"},{"location":"docker-socket-proxy/#how","title":"How?","text":"<p>We can use the Docker Socket Proxy container to act as a man-in-the-middle (AKA Proxy) for the Docker socket.</p> <p>Essentially, the DSP gets full control over the Docker Socket, but it then gives out smaller permissions to the socket out to Nautical (or anything else).</p>"},{"location":"docker-socket-proxy/#setup","title":"Setup","text":"<p>For more information about which Docker Socket Proxy Enviornment varibles you must enable, check out their docs.</p> <pre><code>services:\n  # Establish the docker socket proxy\n  docker_socket_proxy:\n    image: tecnativa/docker-socket-proxy\n    container_name: docker_socket_proxy\n    ports:\n      - 2375:2375\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    environment:\n      # Enable the API access to the following sections of the Docker API\n      - CONTAINERS=1\n      - IMAGES=1\n      - ALLOW_START=1\n      - ALLOW_STOP=1\n      - EXEC=1\n      - VOLUMES=1\n\n  nautical-backup:\n    image: minituff/nautical-backup:2.14\n    container_name: nautical-backup\n    volumes:\n      # Notice we removed the socket mount\n      - /config:/config\n      - /source:/app/source\n      - /destination:/app/destination\n    environment:\n      # Enable the Proxy in Nautical\n      # The name `docker_socket_proxy` must match the name of the service\n      # And they must be in the same compose, unless you use the absolute URL\n      - DOCKER_HOST=tcp://docker_socket_proxy:2375\n</code></pre> <p>LinuxServer.io has their own version of avialable here.</p> <p>It is based off the original Tecnativa/docker-socket-proxy, so all the configs and variables will carry over.</p>"},{"location":"installation/","title":"Installation","text":"<p>For a full list of configuration options, see the Variables and Labels sections.</p>"},{"location":"installation/#docker-compose-example","title":"Docker Compose Example","text":"<pre><code>services:\n  nautical-backup:\n    image: minituff/nautical-backup:2.14 #(7)!\n    container_name: nautical-backup\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock #(1)!\n      - /config:/config #(9)!\n      - /source:/app/source #(2)!\n      - /destination:/app/destination #(3)!\n    environment: # Optional variables (4)\n      - TZ=America/Los_Angeles #(8)!\n      - CRON_SCHEDULE=0 4 * * * #(5)!\n      - SKIP_CONTAINERS=example1,example2,example3 #(6)!\n</code></pre> <ol> <li>Mount the docker socket. Used to start and stop containers. See the Docker Socket Proxy page for more information.</li> <li>Mount the <code>source</code> directory.</li> <li>Mount the <code>destination</code> directory.</li> <li>TIP: Avoid using \"quotes\" in the enviornment variables.</li> <li>Scheduled time to run backups. Use this website to help pick a CRON schedule.<ul> <li>Default = <code>0 4 * * *</code> - Every day at 4am.</li> </ul> </li> <li>Containers to skip for backup. A comma-separated list.</li> <li>It is recommended to avoid using the <code>latest</code> tag.<ul> <li>This project is under active development, using a exact tag can help avoid updates breaking things.</li> </ul> </li> <li>Set the time-zone. See this Wikipedia page for a list of available time-zones.</li> <li>Configuration folder. This directory will will Nautical's internal database which stores metrics and history.</li> </ol>"},{"location":"installation/#docker-cli-example","title":"Docker CLI Example","text":"<pre><code>docker run -d \\\n  --name nautical-backup \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\ #(1)!\n  -v /config:/config \\ #(9)!\n  -v /source:/app/source \\ #(2)!\n  -v /destination:/app/destination \\ #(3)!\n  -e TZ=\"America/Los_Angeles\" \\ #(8)!\n  -e CRON_SCHEDULE=\"0 4 * * *\" \\ #(5)!\n  -e SKIP_CONTAINERS=\"example1,example2,example3\" \\ #(6)!\n  minituff/nautical-backup:2.14 #(7)!\n</code></pre> <ol> <li>Mount the docker socket. Used to start and stop containers. See the Docker Socket Proxy page for more information.</li> <li>Mount the <code>source</code> directory.</li> <li>Mount the <code>destination</code> directory.</li> <li>TIP: Avoid using \"quotes\" in the enviornment variables.</li> <li>Scheduled time to run backups. Use this website to help pick a CRON schedule.<ul> <li>Default = <code>0 4 * * *</code> - Every day at 4am.</li> </ul> </li> <li>Containers to skip for backup. A comma-separated list.</li> <li>It is recommended to avoid using the <code>latest</code> tag.<ul> <li>This project is under active development, using a exact tag can help avoid updates breaking things.</li> </ul> </li> <li>Set the time-zone. See this Wikipedia page for a list of available time-zones.</li> <li>Configuration folder. This directory will will Nautical's internal database which stores metrics and history.</li> </ol>"},{"location":"introduction/","title":"Introduction","text":"<p>Essentially, this is an automated and configurable backup tool built around rsync. </p>"},{"location":"introduction/#the-basics","title":"The Basics","text":"<p>Nautical runs on a <code>CRON</code> schedule to:</p> <ol> <li>Stop the container (if configured)</li> <li>Run the backup via <code>rsync</code></li> <li>Restart the container (if stopped)</li> </ol> <p>\u2697\ufe0f Need more control? There are many more options available via variables and labels.</p>"},{"location":"introduction/#sample-configuration","title":"Sample Configuration","text":"<p>Nautical requires almost no configuration when container volumes are all in a folder matching its <code>container-name</code> within the source directory.  Of course, we can use variables and labels to override these defaults. </p> <p>Let's take a look at an example:</p> Container Name Source Data Directory Destination Data Directory homepage <code>/opt/docker-volumes/homepage</code> <code>/mnt/nfs-share/backups/homepage</code> trilium <code>/opt/docker-volumes/trilium</code> <code>/mnt/nfs-share/backups/trilium</code> dozzle N/A (no data folder) N/A (no backup needed) <p>Here is how Nautical fits into the Sample Configuration</p> Docker ComposeDocker Cli <pre><code>services:\n  nautical-backup:\n    image: minituff/nautical-backup:2.14 #(7)!\n    container_name: nautical-backup\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock #(1)!\n      - /config:/config #(9)!\n      - /opt/docker-volumes:/app/source #(2)!\n      - /mnt/nfs-share/backups:/app/destination #(3)!\n</code></pre> <ol> <li>Mount the docker socket. Used to start and stop containers. See the Docker Socket Proxy page for more information.</li> <li>Mount the <code>source</code> directory.</li> <li>Mount the <code>destination</code> directory.</li> <li>TIP: Avoid using \"quotes\" in the enviornment variables.</li> <li>Scheduled time to run backups. Use this website to help pick a CRON schedule.<ul> <li>Default = <code>0 4 * * *</code> - Every day at 4am.</li> </ul> </li> <li>Containers to skip for backup. A comma-separated list.</li> <li>It is recommended to avoid using the <code>latest</code> tag.<ul> <li>This project is under active development, using a exact tag can help avoid updates breaking things.</li> </ul> </li> <li>Set the time-zone. See this Wikipedia page for a list of available time-zones.</li> <li>Configuration folder. This directory will will Nautical's internal database which stores metrics and history.</li> </ol> <pre><code>docker run -d \\\n  --name nautical-backup \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\ #(1)!\n  -v /opt/docker-volumes:/app/source \\ #(2)!\n  -v /mnt/nfs-share/backups:/app/destination \\ #(3)!\n  -e SKIP_CONTAINERS=\"example1,example2,example3\" \\ #(6)!\n  minituff/nautical-backup:2.14 #(7)!\n</code></pre> <ol> <li>Mount the docker socket. Used to start and stop containers. See the Docker Socket Proxy page for more information.</li> <li>Mount the <code>source</code> directory.</li> <li>Mount the <code>destination</code> directory.</li> <li>TIP: Avoid using \"quotes\" in the enviornment variables.</li> <li>Scheduled time to run backups. Use this website to help pick a CRON schedule.<ul> <li>Default = <code>0 4 * * *</code> - Every day at 4am.</li> </ul> </li> <li>Containers to skip for backup. A comma-separated list.</li> <li>It is recommended to avoid using the <code>latest</code> tag.<ul> <li>This project is under active development, using a exact tag can help avoid updates breaking things.</li> </ul> </li> <li>Set the time-zone. See this Wikipedia page for a list of available time-zones.</li> <li>Configuration folder. This directory will will Nautical's internal database which stores metrics and history.</li> </ol>"},{"location":"labels/","title":"Docker Labels","text":"<p>Docker Labels allow us to apply settings to Nautical on a per-container basis. Instead of applying environment variables, we can apply the label to the each container separately.</p>"},{"location":"labels/#how-to-add-labels","title":"How to add labels","text":"<p>Here are a few examples of how to add labels to a Docker container. Remember, these labels can be added to any container  (other than Nautical itself).</p> Docker Compose Example 1Docker Compose Example 2Docker Run Example 1Docker Run Example 2 <pre><code>version: '3'\nservices:\n  # Service config ...\n  labels:\n    - \"nautical-backup.enable=true\"\n    - \"nautical-backup.stop-before-backup=true\"\n    - \"nautical-backup.rsync-custom-args= \" # Disable custom rsync args\n</code></pre> <pre><code>version: '3'\nservices:\n  pihole:\n    container_name: pihole\n    image: pihole/pihole:latest\n    ports:\n      - \"53:53/tcp\"\n      - \"53:53/udp\"\n      - \"80:80/tcp\"\n    volumes:\n      - './etc-pihole:/etc/pihole'\n      - './etc-dnsmasq.d:/etc/dnsmasq.d'\n    labels:\n      - \"nautical-backup.enable=true\"\n      - \"nautical-backup.stop-before-backup=true\"\n</code></pre> <pre><code>docker run --name example-image \\\n-l nautical-backup.enable=true \\\n-l nautical-backup.stop-before-backup=true \\\nmy-image:latest\n</code></pre> <pre><code>docker run -d \\\n  --name pihole \\\n  -p 53:53/tcp -p 53:53/udp \\\n  -p 80:80 \\\n  -e TZ=\"America/Chicago\" \\\n  -v \"${PIHOLE_BASE}/etc-pihole:/etc/pihole\" \\\n  -v \"${PIHOLE_BASE}/etc-dnsmasq.d:/etc/dnsmasq.d\" \\\n  -l nautical-backup.enable=true \\\n  -l nautical-backup.stop-before-backup=true \\\n  pihole/pihole:latest\n</code></pre>"},{"location":"labels/#label-vs-environment-variable-priority","title":"Label vs Environment Variable Priority","text":"<p>If a container has an Environment Variable applied as well as a conflicting Label, then:</p> <p>The container Label takes priority over the global Nautical environment variable.</p>"},{"location":"labels/#enable-or-disable-nautical","title":"Enable or Disable Nautical","text":"<p>This Docker label can be used to achieve 2 things:</p> <ol> <li>Opt a container OUT of backup</li> <li>Opt a container IN to a backup (with the Nautical Require Label environment variable set to <code>true</code>)</li> </ol> <p>Default If Missing: true  (all containers will be enabled, unless Require Label is set to <code>true</code>).</p> <pre><code>nautical-backup.enable=true\n</code></pre> Example 1 (Opt out)Example 2 (Opt in) <p>With the Require Label environment variable not set or set to <code>false</code>. <pre><code>services: # Example Service #1 config ...\n  labels:\n    - \"nautical-backup.enable=false\"\n</code></pre> <pre><code>services: # Example Service #2 config ...\n  labels:\n    - \"nautical-backup.enable=true\"\n</code></pre> <pre><code>services: # Example Service #3 config ...\n  labels: \n    # No labels\n</code></pre> The results of this configuration would be:</p> <ul> <li> Service 1 - Skipped since <code>nautical-backup.enable</code> was set to <code>false</code></li> <li> Service 2 - Backed up since the label <code>nautical-backup.enable=true</code> was present</li> <li> Service 3 - Backed up since no <code>nautical-backup.enable=false</code> label was found<ul> <li>The Require Label environment variable was either not set or set to <code>false</code> for this example</li> </ul> </li> </ul> <p>With the Require Label environment variable set to <code>true</code> <pre><code>services: # Example Service #1 config ...\n  labels:\n    - \"nautical-backup.enable=true\"\n</code></pre> <pre><code>services: # Example Service #2 config ...\n  labels:\n    - \"nautical-backup.enable=false\"\n</code></pre> <pre><code>services: # Example Service #3 config ...\n  labels: \n    # No labels\n</code></pre></p> <p>The results of this configuration would be:</p> <ul> <li> Service 1 - Backed up since the label <code>nautical-backup.enable=true</code> was present</li> <li> Service 2 - Skipped since <code>nautical-backup.enable</code> was set to <code>false</code></li> <li> Service 3 - Skipped since no <code>nautical-backup.enable=true</code> label was found</li> </ul> <p>\ud83d\udd04 <code>nautical-backup.enable=false</code> is the same action as the Skip Containers variable, but applied only to this container.</p>"},{"location":"labels/#stop-container-before-backup","title":"Stop Container Before Backup","text":"<p>With this label set to <code>false</code>, the container will not be stopped before performing a backup.</p> <p>Default If Missing: true  (container will be stopped before backup).</p> <pre><code>nautical-backup.stop-before-backup=false\n</code></pre> <p>Not stopping containers can produce corrupt backups.</p> <p>Containers with databases--particularly SQL--need to be shutdown before backup.</p> <p>Only do this on containers you know for certain do not need to be shutdown before backup.</p> <p>\ud83d\udd04 This is a similar action to the Skip Stopping Containers variable, but applied only to this container.</p>"},{"location":"labels/#stop-timeout","title":"Stop Timeout","text":"<p>Nautical will allow the container  x amount of seconds to shutdown gracefully before killing the container.</p> <p>Default If Missing: Stop Timeout Environment value (Defaults to 10 seconds)</p> <pre><code>nautical-backup.stop-timeout=10\n</code></pre> <p>\ud83d\udd04 This is a similar action to the Stop Timeout variable, but applied only to this container.</p>"},{"location":"labels/#groups","title":"Groups","text":"<p>Use this label to have multiple containers stopped, backed up, and restarted at the same time.</p> <p>This is useful for services that require multiple containers.</p> <p>Default If Missing: none  (no groups, will be handed independently)</p> <p>Format: <code>&lt;string&gt;</code> (comma separated for multiple items)</p> <pre><code>nautical-backup.group=group_name\n</code></pre> Example 1Example 2 <p>In this example, we define two groups: <code>paperless</code> and <code>authentic</code>.  The <code>redis</code> container is shared between two groups and will be backed up both times.</p> <p><pre><code>paperless-ngx:\n  labels:\n    - \"nautical-backup.group=paperless\"\n</code></pre> <pre><code>redis:\n  labels:\n    - \"nautical-backup.group=paperless,authentic\"\n</code></pre> <pre><code>authentic-worker:\n  labels:\n    - \"nautical-backup.group=authentic\"\n</code></pre></p> <p>In this example, the <code>authentic</code> folder is defined for all the containers used by Authentic.</p> <p>They do not need to be part of the same docker-compose file.</p> <pre><code>services:\n  authentik-worker-1:\n    labels:\n      - \"nautical-backup.group=authentic\"\n  authentik-postgresql-1:\n    labels:\n      - \"nautical-backup.group=authentic\"\n  authentik-redis-1:\n    labels:\n      - \"nautical-backup.group=authentic\"\n</code></pre>"},{"location":"labels/#group-priority-order","title":"Group Priority (Order)","text":"<p>When using the Groups feature, the Priority will allow you to control the order in which containers are started/stopped.</p> <p>Containers within a group are backed up with the highest priority first, in descending order.</p> <p>Default If Missing: 100</p> <p>Format: <code>&lt;integer&gt;</code></p> <pre><code>nautical-backup.group.&lt;group_name&gt;.priority=&lt;integer&gt;\n</code></pre> Example 1Example 2 <ul> <li>The backup order for the group <code>paperless</code> is: paperless-ngx (105) \u2192 redis (90)</li> <li>The backup order for the group <code>authentic</code> is: authentic-worker (100/default) \u2192 redis (85)</li> </ul> <p><pre><code>paperless-ngx:\n  labels:\n    - \"nautical-backup.group=paperless\"\n    - \"nautical-backup.group.paperless.priority=105\"\n</code></pre> <pre><code>redis:\n  labels:\n    - \"nautical-backup.group=paperless,authentic\"\n    - \"nautical-backup.group.paperless.priority=90\"\n    - \"nautical-backup.group.authentic.priority=85\"\n</code></pre> <pre><code>authentic-worker:\n  labels:\n    - \"nautical-backup.group=authentic\"\n</code></pre></p> <ul> <li>The backup order for the group <code>authentic</code> is: worker (110) \u2192 redis (105) \u2192 postgresql (100)</li> </ul> <pre><code>services:\n  authentik-worker-1:\n    labels:\n      - \"nautical-backup.group=authentic\"\n      - \"nautical-backup.group.authentic.priority=110\"\n  authentik-postgresql-1:\n    labels:\n      - \"nautical-backup.group=authentic\"\n      - \"nautical-backup.group.authentic.priority=100\"\n  authentik-redis-1:\n    labels:\n      - \"nautical-backup.group=authentic\"\n      - \"nautical-backup.group.authentic.priority=105\"\n</code></pre>"},{"location":"labels/#require-source-folder-for-backup","title":"Require Source Folder for Backup","text":"<p>Use this label to tell Nautical to process  (start/stop) this container even if it cannot find a matching source directory.</p> <p>Default If Missing: true  (container will be skipped if no matching source folder is found)</p> <pre><code>nautical-backup.source-dir-required=false\n</code></pre> <p>Example</p> <p>Here we have an example Immich deployment. Notice the <code>immich-server</code> does not have any mounted directories, but we still want to stop/start it along with it's other services. This is especially helpful when combined with the Groups feature.</p> <pre><code>immich-server:\n  container_name: immich_server\n  volumes:\n    # No volumes to backup\n  labels:\n    - \"nautical-backup.group=immich\"\n    - \"nautical-backup.source-dir-required=false\"\n\nimmich-redis:\n  container_name: immich_redis\n  volumes:\n    - ${APPDATADIR}/immich/redis:/data\n  labels:\n    - \"nautical-backup.group=immich\"\n    - \"nautical-backup.override-source-dir=immich/redis\"\n\nimmich-database:\n  container_name: immich_postgres\n  volumes:\n    - ${APPDATADIR}/immich/database:/var/lib/postgresql/data\n  labels:\n    - \"nautical-backup.group=immich\"\n    - \"nautical-backup.override-source-dir=immich/database\"\n</code></pre>"},{"location":"labels/#additional-folders","title":"Additional Folders","text":"<p>Use this label to backup more folders associated with the container.</p> <p>The additional folders must either exist or be mounted into the <code>app/source</code> folder within Nautical.</p> <p>Default If Missing: none  (no additional folders)</p> <p>Format: <code>&lt;folder_name&gt;</code> (comma separated for multiple items)</p> <pre><code>nautical-backup.additional-folders=folder1,folder_name2\n</code></pre>"},{"location":"labels/#when-to-backup-additional-folders","title":"When to backup additional folders?","text":"<p>Use this setting to decide if when the additional folders are backed up.</p> <p>Default: during</p> <p>Options: during, before, after</p> <pre><code>nautical-backup.additional-folders.when=after\n</code></pre> <ul> <li> During (Default) - Backup the additional folders while the parent container  is stopped. (This is the safest option).</li> <li> Before -  Backup the additional folders before the parent container is stopped.</li> <li> After -  Backup the additional folders after the parent container is restarted.</li> </ul> Example 1Example 2 <p>In this example, the <code>service-additional</code> folder already exists withing the <code>source</code> directory, so no additional mount point is needed.</p> <pre><code>services:\n  # Service config ...\n  labels:\n    - \"nautical-backup.additional-folders=service-additional\"\n\nservices:\n  nautical-backup:\n    image: minituff/nautical-backup:2.14\n    container_name: nautical-backup\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - /config:/config\n      - /source:/app/source\n</code></pre> <p>In this example, the <code>service-additional</code> folder is mounted from a different directory on the host machine.</p> <p>Also, the additional folders are backed up after the service is restarted.</p> <pre><code>services:\n  # Service config ...\n  labels:\n    - \"nautical-backup.additional-folders=service-additional\"\n    - \"nautical-backup.additional-folders.when=after\"\n\nservices:\n  nautical-backup:\n    image: minituff/nautical-backup:2.14\n    container_name: nautical-backup\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - /config:/config\n      - /source:/app/source\n      - /mnt/service-additional:/app/source/service-additional #(1)!\n</code></pre> <ol> <li>Mount <code>service-additional</code> inside the <code>/app/source</code> directory in the container</li> </ol> <p>If the same folder is called out by the Additional Folders variable and a service label--it will be backed up twice.</p> <p>\ud83d\udd04 This is the same action as the Additional Folders variable, but applied only to this container.</p>"},{"location":"labels/#override-source-directory-name","title":"Override Source Directory Name","text":"<p>Changes the source directory name that Nautical will look for.</p> <p>By default, Nautical will look for the source directory that is the same name as the container name.</p> <p>Default If Missing: empty (use container name)</p> Example 1Example 2Example 3 <pre><code>nautical-backup.override-source-dir=new_folder_name\n</code></pre> <p>To backup the container <code>Pi.Alert</code>, the source directory name must be named <code>Pi.Alert</code>, but we can use the override to allow a backup of the folder named <code>pialert</code>. <pre><code>nautical-backup.override-source-dir=pialert\n</code></pre></p> <p>We can use a nested folder by simply appending it to the source path <pre><code>nautical-backup.override-source-dir=subfolder/example1\n</code></pre>  The example above would yield the following results:</p> Container Name Old Source Directory New Source Directory example1 <code>src/example1</code> <code>src/subfolder/example1</code> <p>Another nested folder example can be found here</p> <p>\ud83d\udd04 This is the same action as the Override Source Directory variable, but applied only to this container.</p>"},{"location":"labels/#override-destination-directory-name","title":"Override Destination Directory Name","text":"<p>Changes the destination/output directory name that Nautical will create during backups.</p> <p>By default, Nautical will create destination directory that is the same name as the container name.</p> <p>Default If Missing: empty (use container name)</p> <pre><code>nautical-backup.override-destination-dir=new_folder_name\n</code></pre> <p>\ud83d\udd04 This is the same action as the Override Destination Directory variable, but applied only to this container.</p>"},{"location":"labels/#mirror-source-directory-name-to-destination","title":"Mirror Source Directory Name to Destination","text":"<p>Mirror the source folder name to the destination folder name. By default (without any overrides), this means both the <code>source</code> and <code>destination</code> folder names are the same as the container name.</p> <p>When using a source directory override, then the <code>nautical-backup.keep_src_dir_name=true</code> setting (which is the default) will mean the destination directory will be the same as the source directory, without using a destination directory overrides.</p> <p>If a destination directory override is applied for a container, then the override will be used instead of mirroring the source name, regardless of the <code>KEEP_SRC_DIR_NAME</code> setting. </p> <p>Default If Missing: true</p> <pre><code>nautical-backup.keep_src_dir_name=false\n</code></pre> <p>\ud83d\udd04 This is the same action as the Mirror Source Directory Name to Destination variable, but applied only to this container.</p>"},{"location":"labels/#execute-commands","title":"Execute Commands","text":"<p>Execute a command before, after or during backing up the container. This can be used to alert the service before shutdown and/or ensure the service came online correctly.</p> <p>Default: empty (nothing will be done)</p> <p>FORMAT: The entirety of a <code>command</code></p> <pre><code>nautical-backup.exec.before=/config/prepare-for-backup.sh\nnautical-backup.exec.after=curl -X POST 'http://192.168.1.21.com/do-something'\nnautical-backup.exec.during=curl -X PATCH 'bing.com'\n</code></pre> <p>Remeber, these commands are exectuted by the Nautical-Backup container, not the child container.</p> <p>If you need to exectute commands inside the continer being backed up, see lifecycle hooks.</p> <p>There are 3 moments when you can run a command (You can use more than 1):</p> <ul> <li> Before - Run the command before the parent container is stopped.</li> <li> After -  Run the command after the parent container is restarted.</li> <li> During - Run the command while the parent container is stopped (Before it is restarted).</li> </ul> Test your <code>exec</code> <p>Before setting the variable/label, it is a good idea to ensure it works first. Here is an example.</p> <p>Ensure Nautical is running first, then run: <pre><code>docker exec -it nautical-backup \\\n  curl -X GET 'google.com'\n</code></pre> Note: You can only have 1 before and 1 after Curl Request. This applies to Nautical itself, not to each container.</p> Available Enviornment Variables Method Description <code>NB_EXEC_CONTAINER_NAME</code> The container name* <code>NB_EXEC_CONTAINER_ID</code> The contianer ID* <code>NB_EXEC_BEFORE_DURING_OR_AFTER</code> When is this command being. Options <code>NB_EXEC_COMMAND</code> The exact command exectuted <code>NB_EXEC_ATTACHED_TO_CONTAINER</code> Is this exec command attached to a container <code>NB_EXEC_TOTAL_ERRORS</code> The total errors on the last run+ <code>NB_EXEC_TOTAL_CONTAINERS_COMPLETED</code> The amount of containers processed successfully+ <code>NB_EXEC_TOTAL_CONTAINERS_SKIPPED</code> The amount of containers skipped (for any reason)+ <code>NB_EXEC_TOTAL_NUMBER_OF_CONTAINERS</code> The amount of containers Nautical looked at+ <p> * Require access to a container. Eg. When <code>NB_EXEC_ATTACHED_TO_CONTAINER=true</code> </p> <p> + Must be used <code>AFTER</code> so there are values to fill. Eg. When <code>nautical-backup.exec.after</code> </p> <p>\ud83d\udcb0 Tip: To use the enviornment variables in a docker-compose file, you will need to escape them with a double <code>$</code>: <pre><code>labels:\n  - \"nautical-backup.exec.before=echo name: $$NB_EXEC_CONTAINER_NAME\" # (1)!\n</code></pre></p> <ol> <li>Notice the double <code>$$</code></li> </ol> <p>\ud83d\udece\ufe0f Want any additional enviornment variables? Submit an issue.</p> Executing a script <p>If you need to run more than a simple one-liner, we can run an entire script instead. Here is a basic example:</p> <p>Create a file (we will name it <code>script.sh</code>) and place it in the mounted <code>/config</code> directory.</p> <p>Remember: We mounted the <code>/config</code> folder as part of the Installation.</p> <pre><code>#!/usr/bin/env bash\n\necho \"Hello from script.sh\"\n\n# Variable usage example\necho \"NB_EXEC_CONTAINER_NAME: $NB_EXEC_CONTAINER_NAME\" \necho \"NB_EXEC_CONTAINER_ID: $NB_EXEC_CONTAINER_ID\" \n</code></pre> <p>Give the file execution permission: <code>chmod +x /config/script.sh</code></p> <p>Test the script</p> <p>Ensure Nautical is running first, then run: <pre><code>docker exec -it nautical-backup \\\n  /bin/bash /config/script.sh\n</code></pre></p> <p>Add your script to the label of your container's config <pre><code>nautical-backup.exec.before=/config/script.sh\n</code></pre></p> <p>\ud83d\udd04 This is the same action as the Execute Commands variable, but applied only to this container.</p>"},{"location":"labels/#lifecycle-hooks","title":"Lifecycle Hooks","text":"<p>Lifecycle Hooks allow you to run a command inside the container that Nautical is backing up. This can be used to shutdown services and/or test for a successful restart.</p> <p>Default: empty (no hooks)</p> <p>FORMAT: docker exec format</p> <pre><code>nautical-backup.lifecycle.before=echo 'Hello from the container'\nnautical-backup.lifecycle.after=/bin/sh ./script.sh\n</code></pre> <p>Test your lifecycle hooks</p> <p>Before setting the label, it is a good idea to ensure it works first. Here is an example.</p> <pre><code>docker exec -it &lt;container-name&gt; echo 'Hello from the container'\ndocker exec -it &lt;container-name&gt; /bin/sh ./script.sh\n</code></pre> <p>Remember: <code>./script.sh</code> is inside the container itself, not within Nautical.</p>"},{"location":"labels/#lifecycle-hook-timeouts","title":"Lifecycle Hook Timeouts","text":"<p>The default timeout for all lifecycle hooks is <code>60 seconds</code> (60s). We can change this using another label.</p> <p>Default: 60s</p> <p>FORMAT: timeout command format (<code>s</code> for seconds, <code>m</code> for minutes <code>h</code> for hours, <code>d</code> for days, <code>0</code> to disable)</p> <pre><code>nautical-backup.lifecycle.before.timeout=1m\nnautical-backup.lifecycle.after.timeout=0 # Disable timeout completely\n</code></pre> Test your timeouts <p>You can test out the command timeout using the following format: <pre><code>docker exec -it &lt;container-name&gt; timeout 0 echo 'Hello from the other side'\ndocker exec -it &lt;container-name&gt; timeout 1m /bin/sh ./script.sh\n</code></pre></p>"},{"location":"labels/#use-default-rsync-arguments","title":"Use Default rsync Arguments","text":"<p>Use the default <code>rsync</code> arguments <code>-raq</code> (recursive, archive, quiet)</p> <p>Useful when using Custom rsync Arguments</p> <p>Default: none (use global setting)</p> <pre><code>nautical-backup.use-default-rsync-args=false\n</code></pre> <p>This label will override the global setting applied through Environment Variables</p> <ul> <li>A value of <code>true</code> will use the default rsync arguments regardless of the global setting.</li> <li>A value of <code>false</code> will not use the default rsync arguments regardless of the global setting.</li> <li>Not setting the label value will use the global setting</li> </ul> <p>\ud83d\udd04 Not setting a label is the same action as the Use Default rsync Arguments variable, but applied only to this container.</p>"},{"location":"labels/#custom-rsync-arguments","title":"Custom rsync Arguments","text":"<p>Apply custom <code>rsync</code> args (in addition to the default args)</p> <p>Default: empty (use global setting)</p> <pre><code>nautical-backup.rsync-custom-args=--exclude='*.log' --exclude='*.txt'\n</code></pre> <p>This label will override the global setting applied through Environment Variables</p> <ul> <li>Any value will override the global rsync arguments configured through global settings.</li> <li>A value of (space) <code>\"nautical-backup.rsync-custom-args= \"</code> will cancel any global setting for this container only.</li> <li>Not setting the label value will use the global setting.</li> </ul> <p>\ud83d\udd04 Not setting a label is the same action as the Custom rsync Arguments variable, but applied only to this container.</p>"},{"location":"q-and-a/","title":"Q & A","text":""},{"location":"q-and-a/#why-do-we-need-docker-volume-backups","title":"Why do we need docker volume backups?","text":"<p>If your Docker Host machine doesn't take snapshots like a ZFS-based machine does, then you aren't protected against faulty configuration or complete deletion of our container data.</p>"},{"location":"q-and-a/#why-do-we-need-to-stop-the-container-before-a-backup","title":"Why do we need to stop the container before a backup?","text":"<p>This is important for containers that run databases, especially SQL. During database access, the database will be temporarily locked during a write action and then unlocked afterwards. If a container is backed up during a datable lock, then your database could become corrupted.</p> <p>Stopping the container guarantees it was given the proper time to gracefully stop all services and unlock the databases before we create a backup. Yes, there will be downtime for this, but it is only a few seconds and you can schedule this to run in off-peak hours.</p>"},{"location":"q-and-a/#why-dont-i-store-the-container-volumes-directly-on-a-nfs-share","title":"Why don't I store the container volumes directly on a NFS share?","text":"<p>This is common idea, but SQL databases would constantly go into a locked state about once every few weeks. (This happens frequently with apps like Sonarr, Radarr, Prowlarr, etc.) Stopping the container first is the only way to guarantee there is no corruption.</p>"},{"location":"q-and-a/#why-dont-we-backup-the-entire-container-itself","title":"Why don't we backup the entire container itself?","text":"<p>Containers are meant to be ephemeral, and essentially meaningless. The goal is to have only the data referenced by the container be important----not the container itself.</p> <p>If something bad happened to the docker stack, we only need the <code>docker-compose</code> files and the data they referenced. This would allow us to be back online in no time!</p> <p>If you would like to save data or changes within the docker container, consider making a new image. This would save the modification steps and allow it to be easily replicated.</p>"},{"location":"q-and-a/#does-nautical-support-remote-backups","title":"Does Nautical support remote backups?","text":"<p>This question is answered here.</p>"},{"location":"q-and-a/#where-do-i-run-nautical","title":"Where do I run Nautical?","text":"<p>Nautical is only able to access the Docker containers running on the same machine as the Nautical container itself. So if you run multiple VMs/LXCs that have unique Docker installations on each of them, then you would need to install Nautical on each one.</p>"},{"location":"rest-api/","title":"Rest API","text":""},{"location":"rest-api/#enable-the-api","title":"Enable The API","text":"<p>The API is enabled internally by default, but you still must open the port for external access. Follow these steps:</p> <p>Why is the REST API on internally?</p> <p>The REST API is used internally for Docker Healthchecks.  However, if do not open the port via Docker, then all the endpoints will remain unreachable.</p>"},{"location":"rest-api/#1-map-the-port","title":"1. Map the port","text":"<p>You need to ensure the port is opened by Docker for the Nautical container. See the highlighted sections of this example Nautical config:</p> Docker ComposeDocker Cli <pre><code>services:\n  nautical-backup:\n    image: minituff/nautical-backup:2.14\n    container_name: nautical-backup\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - /config:/config\n      - /source:/app/source\n    ports:\n      - \"8069:8069/tcp\"\n</code></pre> <pre><code>docker run -d \\\n  --name nautical-backup \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -v /config:/config \\\n  -v /source:/app/source \\\n  -v /destination:/app/destination \\\n  -p 8069:8069/tcp \\\n  minituff/nautical-backup:2.14\n</code></pre>"},{"location":"rest-api/#2-verify-it-works","title":"2. Verify it works","text":"<p>To view the API, go to http://localhost:8069/docs in your browser.</p>"},{"location":"rest-api/#authentication","title":"Authentication","text":"<p>The default login is <code>admin</code> / <code>password</code>. This can be changed here.</p> <pre><code>curl -X GET \\\n  'http://localhost:8069/auth' \\\n  --header 'Authorization: Basic YWRtaW46cGFzc3dvcmQ='\n</code></pre> <p>Use this site to generate a Base64 token.</p>"},{"location":"rest-api/#dashboard","title":"Dashboard","text":"<p>GET /api/v1/nautical/dashboard</p> <p>This endpoint is the quickest way to get a glimpse into everything Nautical has going on.</p> Example response <pre><code>{\n  \"next_cron\": {\n    \"1\": [\n      \"Monday, November 20, 2023 at 04:00 AM\",\n      \"11/20/23 04:00\"\n    ],\n    \"2\": [\n      \"Tuesday, November 21, 2023 at 04:00 AM\",\n      \"11/21/23 04:00\"\n    ],\n    \"3\": [\n      \"Wednesday, November 22, 2023 at 04:00 AM\",\n      \"11/22/23 04:00\"\n    ],\n    \"4\": [\n      \"Thursday, November 23, 2023 at 04:00 AM\",\n      \"11/23/23 04:00\"\n    ],\n    \"5\": [\n      \"Friday, November 24, 2023 at 04:00 AM\",\n      \"11/24/23 04:00\"\n    ],\n    \"cron\": \"0 4 * * *\",\n    \"tz\": \"America/Los_Angeles\"\n  },\n  \"next_run\": \"11/20/23 04:00\",\n  \"last_cron\": \"11/19/23 04:00\",\n  \"number_of_containers\": \"1\",\n  \"completed\": \"0\",\n  \"skipped\": \"1\",\n  \"errors\": \"0\",\n  \"last_backup_seconds_taken\": \"15\",\n  \"backup_running\": \"false\"\n}\n</code></pre>"},{"location":"rest-api/#next-cron","title":"Next CRON","text":"<p>GET /api/v1/nautical/next_cron/{occurrences}</p> <p>{occurrences} = integer between 1 and 100</p> <p>Get the next n scheduled times Nautical will run.</p> Example response <pre><code>{\n  \"1\": [\n    \"Monday, November 20, 2023 at 04:00 AM\",\n    \"11/20/23 04:00\"\n  ],\n  \"2\": [\n    \"Tuesday, November 21, 2023 at 04:00 AM\",\n    \"11/21/23 04:00\"\n  ],\n  \"cron\": \"0 4 * * *\",\n  \"tz\": \"America/Los_Angeles\"\n}\n</code></pre>"},{"location":"rest-api/#start-backup","title":"Start Backup","text":"<p>POST /api/v1/nautical/start_backup</p> <p>Start a backup now. The API will not respond until the backup has completed. </p> <p>All the Variables and Labels are respected.</p> Example response <pre><code>{\n  \"message\": \"Nautical Backup completed successfully\"\n}\n</code></pre>"},{"location":"rest-api/#kickoff-backup","title":"Kickoff Backup","text":"<p>POST /api/v1/nautical/kickoff_backup</p> <p>Start a backup now in the background. The API will respond immediately.</p> <p>All the Variables and Labels are respected.</p> Example response <pre><code>{\n  \"message\": \"Nautical Backup started successfully\"\n}\n</code></pre>"},{"location":"updates/","title":"Updating Nautical","text":"<p>Updating Nautical (and any container) is a balance between convenience, reliability and security.</p> <p>Updating your container can bring new features, bug fixes and security patches, but can also introduce unintended behavior.</p>"},{"location":"updates/#understanding-semantic-versioning","title":"Understanding Semantic Versioning","text":"<p>Semver is a means to communicate the changes to an application just by looking at the version number. Nautical uses Semver like this.</p> <p><code>vMAJOR.MINOR.PATCH</code>, for example: </p> <ul> <li>MAJOR - A large change that breaks/reworks an existing feature. <ul> <li>This usually means you will need to change the Nautical configuration.</li> </ul> </li> <li>MINOR - Add functionality in a backward compatible manner.<ul> <li>Everything should continue working without changes to the Nautical configuration.</li> </ul> </li> <li>PATCH - A small change such as updating a dependency, log output, or minor fix.<ul> <li>From the user perspective, nothing will have changed, but under the hood, small improvements were made.</li> </ul> </li> </ul>"},{"location":"updates/#manual-updates","title":"Manual Updates","text":"<p>To manually update Nautical, simply re-deploy using either of these configs, but specify the latest version of the Nautical. Currently, the latest version of Nautical is . (do not add the <code>v</code>)</p> <p>This will need to be done each time a new version is released.</p> Docker ComposeDocker Cli <pre><code>services:\n  nautical-backup:\n    image: minituff/nautical-backup:2.14.16 # Change this to the latest version\n    # Rest of config...\n</code></pre> <pre><code>docker run -d \\\n  --name nautical-backup \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\ #(1)!\n  -v /config:/config \\ #(9)!\n  -v /source:/app/source \\ #(2)!\n  -v /destination:/app/destination \\ #(3)!\n  minituff/nautical-backup:2.14.16\n\n  # Update the version number in the line above\n</code></pre> <ol> <li>Mount the docker socket. Used to start and stop containers. See the Docker Socket Proxy page for more information.</li> <li>Mount the <code>source</code> directory.</li> <li>Mount the <code>destination</code> directory.</li> <li>TIP: Avoid using \"quotes\" in the enviornment variables.</li> <li>Scheduled time to run backups. Use this website to help pick a CRON schedule.<ul> <li>Default = <code>0 4 * * *</code> - Every day at 4am.</li> </ul> </li> <li>Containers to skip for backup. A comma-separated list.</li> <li>It is recommended to avoid using the <code>latest</code> tag.<ul> <li>This project is under active development, using a exact tag can help avoid updates breaking things.</li> </ul> </li> <li>Set the time-zone. See this Wikipedia page for a list of available time-zones.</li> <li>Configuration folder. This directory will will Nautical's internal database which stores metrics and history.</li> </ol>"},{"location":"updates/#automatic-updates","title":"Automatic Updates","text":"<p>Watchtower is an excellent tool to keep your Docker containers updated.</p> <p>While convenient, automatic updates may break things. For this reason we recommend only automatically updating to the latest <code>PATCH</code> version.</p> Patch Updates OnlyMinor And Patch UpdatesLatest Updates (All) <p>These examples only specify the Semver <code>vMAJOR.MINOR</code> numbers, leaving <code>PATCH</code> out--this means that Watchtower will update the <code>PATCH</code> number if available.</p> Docker ComposeDocker Cli <pre><code>services:\n  nautical-backup:\n    image: minituff/nautical-backup:2.14 #(7)!\n    # Rest of config...\n\n  watchtower:\n    image: containrrr/watchtower:latest\n    container_name: watchtower\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    command: nautical-backup # (9)! \n</code></pre> <ol> <li>Mount the docker socket. Used to start and stop containers. See the Docker Socket Proxy page for more information.</li> <li>Mount the <code>source</code> directory.</li> <li>Mount the <code>destination</code> directory.</li> <li>TIP: Avoid using \"quotes\" in the enviornment variables.</li> <li>Scheduled time to run backups. Use this website to help pick a CRON schedule.<ul> <li>Default = <code>0 4 * * *</code> - Every day at 4am.</li> </ul> </li> <li>Containers to skip for backup. A comma-separated list.</li> <li>It is recommended to avoid using the <code>latest</code> tag.<ul> <li>This project is under active development, using a exact tag can help avoid updates breaking things.</li> </ul> </li> <li>Set the time-zone. See this Wikipedia page for a list of available time-zones.</li> <li>Configuration folder. This directory will will Nautical's internal database which stores metrics and history.</li> <li> <p>Which containers to use. </p> <p>Remove this line to update all containers.</p> </li> </ol> <pre><code>docker run -d \\\n  --name nautical-backup \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\ #(1)!\n  -v /config:/config \\ #(9)!\n  -v /source:/app/source \\ #(2)!\n  -v /destination:/app/destination \\ #(3)!\n  minituff/nautical-backup:2.14 #(7)!\n\ndocker run -d \\\n  --name watchtower \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  containrrr/watchtower \\\n  nautical-backup #(9)!\n</code></pre> <ol> <li>Mount the docker socket. Used to start and stop containers. See the Docker Socket Proxy page for more information.</li> <li>Mount the <code>source</code> directory.</li> <li>Mount the <code>destination</code> directory.</li> <li>TIP: Avoid using \"quotes\" in the enviornment variables.</li> <li>Scheduled time to run backups. Use this website to help pick a CRON schedule.<ul> <li>Default = <code>0 4 * * *</code> - Every day at 4am.</li> </ul> </li> <li>Containers to skip for backup. A comma-separated list.</li> <li>It is recommended to avoid using the <code>latest</code> tag.<ul> <li>This project is under active development, using a exact tag can help avoid updates breaking things.</li> </ul> </li> <li>Set the time-zone. See this Wikipedia page for a list of available time-zones.</li> <li>Configuration folder. This directory will will Nautical's internal database which stores metrics and history.</li> <li> <p>Which containers to use. </p> <p>Remove this line to update all containers.</p> </li> </ol> <p>These examples specify the Semver <code>vMAJOR</code> number, leaving <code>MINOR</code> <code>PATCH</code> out--this means that Watchtower will update <code>MINOR</code> and <code>PATCH</code> versions if available.</p> Docker ComposeDocker Cli <pre><code>services:\n  nautical-backup:\n    image: minituff/nautical-backup:2\n    # Rest of config...\n\n  watchtower:\n    image: containrrr/watchtower:latest\n    container_name: watchtower\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    command: nautical-backup # (9)! \n</code></pre> <ol> <li>Mount the docker socket. Used to start and stop containers. See the Docker Socket Proxy page for more information.</li> <li>Mount the <code>source</code> directory.</li> <li>Mount the <code>destination</code> directory.</li> <li>TIP: Avoid using \"quotes\" in the enviornment variables.</li> <li>Scheduled time to run backups. Use this website to help pick a CRON schedule.<ul> <li>Default = <code>0 4 * * *</code> - Every day at 4am.</li> </ul> </li> <li>Containers to skip for backup. A comma-separated list.</li> <li>It is recommended to avoid using the <code>latest</code> tag.<ul> <li>This project is under active development, using a exact tag can help avoid updates breaking things.</li> </ul> </li> <li>Set the time-zone. See this Wikipedia page for a list of available time-zones.</li> <li>Configuration folder. This directory will will Nautical's internal database which stores metrics and history.</li> <li> <p>Which containers to use. </p> <p>Remove this line to update all containers.</p> </li> </ol> <pre><code>docker run -d \\\n  --name nautical-backup \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\ #(1)!\n  -v /config:/config \\ #(9)!\n  -v /source:/app/source \\ #(2)!\n  -v /destination:/app/destination \\ #(3)!\n  minituff/nautical-backup:2\n\ndocker run -d \\\n  --name watchtower \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  containrrr/watchtower \\\n  nautical-backup #(9)!\n</code></pre> <ol> <li>Mount the docker socket. Used to start and stop containers. See the Docker Socket Proxy page for more information.</li> <li>Mount the <code>source</code> directory.</li> <li>Mount the <code>destination</code> directory.</li> <li>TIP: Avoid using \"quotes\" in the enviornment variables.</li> <li>Scheduled time to run backups. Use this website to help pick a CRON schedule.<ul> <li>Default = <code>0 4 * * *</code> - Every day at 4am.</li> </ul> </li> <li>Containers to skip for backup. A comma-separated list.</li> <li>It is recommended to avoid using the <code>latest</code> tag.<ul> <li>This project is under active development, using a exact tag can help avoid updates breaking things.</li> </ul> </li> <li>Set the time-zone. See this Wikipedia page for a list of available time-zones.</li> <li>Configuration folder. This directory will will Nautical's internal database which stores metrics and history.</li> <li> <p>Which containers to use. </p> <p>Remove this line to update all containers.</p> </li> </ol> <p>If you're really feeling like living on the bleeding edge. You can use the <code>latest</code> tag to ensure you are always up to date. This will get the latest Semver <code>MAJOR</code>, <code>MINOR</code>, and <code>PATCH</code> updates.</p> <p>This will most likely break things at some point</p> <p>If you go this route, just ensure you aren't using Nautical for anything mission critical, and be prepared to either help troubleshoot or wait for a new version with a bug fix.</p> <p>This is an example of using Watchtower to keep Nautical on the <code>latest</code> version.</p> Docker ComposeDocker Cli <pre><code>services:\n  nautical-backup:\n    image: minituff/nautical-backup:latest\n    # Rest of config...\n\n  watchtower:\n    image: containrrr/watchtower:latest\n    container_name: watchtower\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    command: nautical-backup # (9)! \n</code></pre> <ol> <li>Mount the docker socket. Used to start and stop containers. See the Docker Socket Proxy page for more information.</li> <li>Mount the <code>source</code> directory.</li> <li>Mount the <code>destination</code> directory.</li> <li>TIP: Avoid using \"quotes\" in the enviornment variables.</li> <li>Scheduled time to run backups. Use this website to help pick a CRON schedule.<ul> <li>Default = <code>0 4 * * *</code> - Every day at 4am.</li> </ul> </li> <li>Containers to skip for backup. A comma-separated list.</li> <li>It is recommended to avoid using the <code>latest</code> tag.<ul> <li>This project is under active development, using a exact tag can help avoid updates breaking things.</li> </ul> </li> <li>Set the time-zone. See this Wikipedia page for a list of available time-zones.</li> <li>Configuration folder. This directory will will Nautical's internal database which stores metrics and history.</li> <li> <p>Which containers to use. </p> <p>Remove this line to update all containers.</p> </li> </ol> <pre><code>docker run -d \\\n  --name nautical-backup \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\ #(1)!\n  -v /config:/config \\ #(9)!\n  -v /source:/app/source \\ #(2)!\n  -v /destination:/app/destination \\ #(3)!\n  minituff/nautical-backup:latest\n\ndocker run -d \\\n  --name watchtower \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  containrrr/watchtower \\\n  nautical-backup #(9)!\n</code></pre> <ol> <li>Mount the docker socket. Used to start and stop containers. See the Docker Socket Proxy page for more information.</li> <li>Mount the <code>source</code> directory.</li> <li>Mount the <code>destination</code> directory.</li> <li>TIP: Avoid using \"quotes\" in the enviornment variables.</li> <li>Scheduled time to run backups. Use this website to help pick a CRON schedule.<ul> <li>Default = <code>0 4 * * *</code> - Every day at 4am.</li> </ul> </li> <li>Containers to skip for backup. A comma-separated list.</li> <li>It is recommended to avoid using the <code>latest</code> tag.<ul> <li>This project is under active development, using a exact tag can help avoid updates breaking things.</li> </ul> </li> <li>Set the time-zone. See this Wikipedia page for a list of available time-zones.</li> <li>Configuration folder. This directory will will Nautical's internal database which stores metrics and history.</li> <li> <p>Which containers to use. </p> <p>Remove this line to update all containers.</p> </li> </ol>"},{"location":"advanced/advanced/","title":"Source & Destination Mappings","text":"<p>These examples used Docker Compose syntax. See the Installation section to fit them into your configuration.</p> <p>Remember the folder naming convention</p> <ol> <li>The <code>container-name</code> must match the <code>source</code> and <code>destination</code> folder names.</li> <li>You can override this using Arguments.</li> </ol>"},{"location":"advanced/advanced/#alternative-source-directories","title":"Alternative Source Directories","text":"<p>Don't have all your container volumes in the same directory? That's okay, we can use Docker volume mappings to help.</p> Example 1Example 2 <p>This config allows additional volumes outside the traditional <code>source</code> directory.</p> <pre><code>volumes:\n  # Standard config\n  - /var/run/docker.sock:/var/run/docker.sock\n  - /source:/app/source\n  - /destination:/app/destination\n  # Alternative source directories examples\n  - /opt/pihole:/app/source/pihole #(1)!\n  - /mnt/docker_volumes/plex:/app/source/plex #(2)!\n</code></pre> <ol> <li>Mounted from a different <code>source</code> directory</li> <li>Mounted from a different <code>source</code> directory</li> </ol> <p>We added 2 additional source volumes: <code>pihole</code> and <code>plex</code>. The end result will have a source directory inside the Nautical container that looks like this:</p> <pre><code>&lt;Nautical Backup&gt;/app/source:\n- container1-data #(1)!\n- container2-data #(2)!\n- pihole           # Mapped from /opt/pihole\n- plex             # Mapped from /mnt/docker_volumes/plex\n</code></pre> <ol> <li>This is an example container data folder from the mounted <code>/source</code> directory</li> <li>This is an example container data folder from the mounted <code>/source</code> directory</li> </ol> <p>This config uses volumes only outside the traditional <code>source</code> directory.</p> <pre><code>volumes:\n  # Standard config\n  - /var/run/docker.sock:/var/run/docker.sock\n  - /destination:/app/destination #(1)!\n  # Alternative source directories examples\n  - /opt/pihole:/app/source/pihole\n  - /opt/trilium:/app/source/trilium\n  - /mnt/docker_volumes/plex:/app/source/plex\n  - /var/data/portainer:/app/source/portainer\n</code></pre> <ol> <li>Even though we used alternative <code>source</code> directories, the <code>destination</code> directories will all be the same:   <pre><code>/destination/pihole\n/destination/trilium\n/destination/plex\n/destination/portainer\n</code></pre></li> </ol> <p>This configuration allows us to map as many container data folders as we'd like from any source directory. <pre><code>&lt;Nautical Backup&gt;/app/source:\n- pihole     # Mapped from /opt/pihole\n- trilium    # Mapped from /opt/trilium\n- plex       # Mapped from /mnt/docker_volumes/plex\n- portainer  # Mapped from /var/data/portainer\n</code></pre></p>"},{"location":"advanced/advanced/#alternative-destination-directories","title":"Alternative Destination Directories","text":"<p>We can also remap the destination directory for any container we'd like.</p> Example 1Example 2 <pre><code>volumes:\n  # Standard config\n  - /var/run/docker.sock:/var/run/docker.sock\n  - /source:/app/source #(1)!\n  - /destination:/app/destination\n  # Alternative destination directories examples\n  - /opt/pihole-backup:/app/destination/pihole\n  - /mnt/docker_volume-backups/plex:/app/destination/plex\n</code></pre> <ol> <li>Even though we used alternative <code>destination</code> directories, the <code>source</code> directories are using the standard configuration:   <pre><code>/source/pihole\n/source/plex\n</code></pre></li> </ol> <p>This config allows the addition of volumes outside the traditional <code>destination</code> directory.</p> <p>We added 2 additional destination volumes: <code>pihole</code> and <code>plex</code>. The end result will have a destination directory inside the Nautical container that looks like this:</p> <pre><code>&lt;Nautical Backup&gt;/app/destination:\n- container1-data #(1)!\n- container2-data #(2)!\n- pihole           # Mapped to /opt/pihole-backup\n- plex             # Mapped to /mnt/docker_volume-backups/plex\n</code></pre> <ol> <li>This is an example container data folder from the mounted <code>/source</code> directory</li> <li>This is an example container data folder from the mounted <code>/source</code> directory</li> </ol> <pre><code>volumes:\n  # Standard config\n  - /var/run/docker.sock:/var/run/docker.sock\n  - /source:/app/source #(1)!\n  # Alternative destination directories examples\n  - /opt/pihole:/app/destination/pihole\n  - /opt/trilium:/app/destination/trilium\n  - /mnt/docker_volumes/plex:/app/destination/plex\n  - /var/data/portainer:/app/destination/portainer\n</code></pre> <ol> <li>Even though we used alternative <code>destination</code> directories, the <code>source</code> directories will all be the same:   <pre><code>/source/pihole\n/source/trilium\n/source/plex\n/source/portainer\n</code></pre></li> </ol> <p>This configuration allows us to map as many container data folders as we'd like to any destination directory. <pre><code>&lt;Nautical Backup&gt;/app/destination:\n- pihole     # Mapped to /opt/pihole\n- trilium    # Mapped to /opt/trilium\n- plex       # Mapped to /mnt/docker_volumes/plex\n- portainer  # Mapped to /var/data/portainer\n</code></pre></p>"},{"location":"advanced/homepage-dashboard/","title":"Homepage Dashboard","text":"<p>Homepage is a modern, fully static, fast, secure fully proxied, highly customizable application dashboard with integrations for over 100 services and translations into multiple languages. Easily configured via YAML files or through docker label discovery.</p> <p></p>"},{"location":"advanced/homepage-dashboard/#add-nautical-to-homepage","title":"Add Nautical to Homepage","text":"<p>We are going to take advantage of Homepage's Custom API Widget to get the following result:</p> <p></p> <p>Our configuration will look something like this:</p> <pre><code>- Nautical Backup:\n    icon: https://raw.githubusercontent.com/Minituff/nautical-backup/main/docs/media/Logo-large.png\n    description: Docker Volume Backups\n    widget:\n        type: customapi\n        url: http://&lt;nautical-ip&gt;:8069/api/v1/nautical/dashboard\n        username: admin\n        password: password\n        method: GET\n        mappings:\n        - field: number_of_containers\n          label: Total Containers\n\n        - field: completed\n          label: Completed\n\n        - field: skipped\n          label: Skipped\n\n        - field: errors\n          label: errors\n\n        - field: last_cron \n          label: Last Run\n          format: relativeDate # (1)!\n\n        - field: next_cron\n          label: Next Run\n</code></pre> <ol> <li> <p>Here, you can set an additional property called <code>format</code> to one of these options:</p> <ul> <li><code>relativeDate</code> example: 10 hours ago</li> <li><code>date</code> removes the exact time and shows the day only</li> </ul> <p>You can also add this to the <code>next_cron</code> field.</p> </li> </ol> <p>It is recommended that you don't enable all the fields. Just comment out the fields that you don't need.</p> Field Translation <pre><code>{\n    \"next_cron\": {\n    \"1\": [\n        \"Monday, April 22, 2024 at 05:00 AM\",\n        \"04/22/24 05:00\"\n    ],\n    \"2\": [\n        \"Tuesday, April 23, 2024 at 05:00 AM\",\n        \"04/23/24 05:00\"\n    ],\n    \"3\": [\n        \"Wednesday, April 24, 2024 at 05:00 AM\",\n        \"04/24/24 05:00\"\n    ],\n    \"4\": [\n        \"Thursday, April 25, 2024 at 05:00 AM\",\n        \"04/25/24 05:00\"\n    ],\n    \"5\": [\n        \"Friday, April 26, 2024 at 05:00 AM\",\n        \"04/26/24 05:00\"\n    ],\n    \"cron\": \"0 5 * * *\",\n    \"tz\": \"America/Los_Angeles\"\n    },\n    \"last_cron\": \"04/21/24 05:00\",\n    \"next_run\": \"04/22/24 05:00\",\n    \"number_of_containers\": 33,\n    \"completed\": 25,\n    \"skipped\": 8,\n    \"errors\": 0,\n    \"backup_running\": 8\n}\n</code></pre>"},{"location":"advanced/nfs-share/","title":"NFS Shares","text":"<p>Nautical itself does not have the ability to map network shares. However, it can use a network share for either the source or destination.</p> <p>Commonly, we run containers on our host machine, then use an NFS share as the backup destination location. This page will give a brief overview of how to do that.</p>"},{"location":"advanced/nfs-share/#connect-to-an-nfs-share-on-container-host-linux","title":"Connect to an NFS Share On Container Host (Linux)","text":"<ol> <li> <p>Create the NFS destination directories.     <pre><code># Create mount point (1)\nmkdir -p /mnt/nfs/docker_backups\n</code></pre></p> <ol> <li>The destination directories must exist before a mount can be created  </li> </ol> </li> <li> <p>Setup NFS mount points:      <pre><code>nano /etc/fstab\n</code></pre>     This will open a file, and here you can insert your NFS configuration:     /etc/fstab<pre><code># | ------------- Source -------------- | ---- Destination ---- | -------- Options ---------- |\n192.168.1.10:/mnt/backups/docker_volumes /mnt/nfs/docker_backups nfs _netdev,auto,rw,async 0 0\n</code></pre> Tip: <code>192.168.1.10</code> is just an example IP address</p> </li> <li> <p>Apply and mount the NFS shares     <pre><code>mount -a\n</code></pre></p> <p>A successful <code>mount -a</code> will return nothing in the console</p> </li> <li> <p>Verify read and write access     <pre><code>cd /mnt/nfs/docker_backups\ntouch test.txt &amp;&amp; rm test.txt\n</code></pre></p> </li> </ol>"},{"location":"advanced/nfs-share/#add-nautical-backup","title":"Add Nautical Backup","text":"<p>The above example created a local directory of <code>/mnt/nfs/docker_backups</code> which is an NFS share pointing to <code>192.168.1.10:/mnt/backups/docker_volumes</code>.</p> <p>Here is how we can use this new mount withing Nautical:</p> Docker ComposeDocker Run <pre><code>services:\n  nautical-backup:\n    image: minituff/nautical-backup:2.14 #(7)!\n    container_name: nautical-backup\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock #(1)!\n      - /config:/config #(9)!\n      - /source:/app/source #(2)!\n      - /mnt/nfs/docker_backups:/app/destination #(3) &lt;-- NFS Share\n</code></pre> <ol> <li>Mount the docker socket. Used to start and stop containers. See the Docker Socket Proxy page for more information.</li> <li>Mount the <code>source</code> directory.</li> <li>Mount the <code>destination</code> directory.</li> <li>TIP: Avoid using \"quotes\" in the enviornment variables.</li> <li>Scheduled time to run backups. Use this website to help pick a CRON schedule.<ul> <li>Default = <code>0 4 * * *</code> - Every day at 4am.</li> </ul> </li> <li>Containers to skip for backup. A comma-separated list.</li> <li>It is recommended to avoid using the <code>latest</code> tag.<ul> <li>This project is under active development, using a exact tag can help avoid updates breaking things.</li> </ul> </li> <li>Set the time-zone. See this Wikipedia page for a list of available time-zones.</li> <li>Configuration folder. This directory will will Nautical's internal database which stores metrics and history.</li> </ol> <pre><code>docker run -d \\\n  --name nautical-backup \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\ #(1)!\n  -v /config:/config \\ #(9)!\n  -v /mnt/nfs/docker_backups:/app/destination \\ #(2)!\n  -e SKIP_CONTAINERS=\"example1,example2,example3\" \\ #(6)!\n  minituff/nautical-backup:2.14 #(7)!\n</code></pre> <ol> <li>Mount the docker socket. Used to start and stop containers. See the Docker Socket Proxy page for more information.</li> <li>Mount the <code>source</code> directory.</li> <li>Mount the <code>destination</code> directory.</li> <li>TIP: Avoid using \"quotes\" in the enviornment variables.</li> <li>Scheduled time to run backups. Use this website to help pick a CRON schedule.<ul> <li>Default = <code>0 4 * * *</code> - Every day at 4am.</li> </ul> </li> <li>Containers to skip for backup. A comma-separated list.</li> <li>It is recommended to avoid using the <code>latest</code> tag.<ul> <li>This project is under active development, using a exact tag can help avoid updates breaking things.</li> </ul> </li> <li>Set the time-zone. See this Wikipedia page for a list of available time-zones.</li> <li>Configuration folder. This directory will will Nautical's internal database which stores metrics and history.</li> </ol>"},{"location":"advanced/remote-backups/","title":"Remote Backups","text":"<p>Nautical does not provide connectivity to remote services such as S3, B2, or Google Drive. We believe there are better tools for these jobs and think it is best not to recreate them.</p> <p>Nautical can backup to an NFS share though, we have detailed steps to do this here.</p> <p>Here is a list of a few of our favorite remote backup solutions:</p> <ul> <li>https://kopia.io</li> <li>https://borgbackup.org</li> <li>https://restic.net</li> <li>https://duplicacy.com</li> <li>https://duplicati.com</li> </ul> <p>Ideally, you would configure Nautical to create a backup at a <code>destination</code> folder, then point that folder to a remote backup solution.</p>"},{"location":"developers/dev-container/","title":"Dev Container","text":""},{"location":"developers/dev-container/#1-verify-requirements","title":"1. Verify Requirements","text":"<ul> <li> Docker</li> <li> Dev Containers VSCode extension</li> </ul>"},{"location":"developers/dev-container/#2-open-devcontainer","title":"2. Open DevContainer","text":"<ol> <li>Clone to repo, then open it in VSCode.</li> <li>Press Ctrl+Shift+P</li> <li>Then select <code>Dev Container: Open Folder in Container</code></li> <li>Wait for the container to build</li> </ol>"},{"location":"developers/dev-container/#3-check-the-container","title":"3. Check the container","text":"<p>Once the container is running and you're connected, you should see <code>Dev Container: Nautical</code> in the bottom left of the Status bar.</p>"},{"location":"developers/dev-container/#the-nb-command","title":"The <code>nb</code> command","text":"<p>The <code>nb</code> command gets installed as part of the DevContainer creation process.</p> <pre><code>nb --help\n\n-- Nautical Backup Developer Commands: \nbuild          - Build Nautical container\nrun            - Run already built Nautical container\nbuild-run      - Build and run Nautical container\n\nbuild-test     - Build and run Nautical Testing container\ntest           - Run already built test Nautical container\nbuild-test-run - Build and run Nautical Testing container\n\napi            - Run the Python API locally\npytest         - Pytest locally and capture coverage\nformat         - Format all python code with black\n\ndocs           - Run the Nautical documentation locally\n</code></pre>"},{"location":"developers/docs/","title":"Contributing to the Documentation","text":"<p>This documentation is built using 2 major components:</p> <ol> <li> <p>Material for MkDocs is a powerful documentation framework on top of MkDocs, a static site generator for project documentation.</p> </li> <li> <p>MkDocs is a fast, simple and downright gorgeous static site generator that's geared towards building project documentation. Documentation source files are written in <code>Markdown</code>, and configured with a single <code>YAML</code> configuration file.</p> </li> </ol>"},{"location":"developers/docs/#running-the-docs-locally","title":"Running the Docs Locally","text":"<p>Spinning up the the docs locally ideal for development thanks to hot reload.</p> <p>There are three easy ways to get MkDocs up and running locally:</p> <ol> <li>VsCode DevContainer (recommended)</li> <li>Docker </li> <li>Python and pip</li> </ol> <p>Methods 2 and 3 will not work in a VsCode DevContainer\u2014\u2014use method 1 instead.</p>"},{"location":"developers/docs/#vscode-devcontainer","title":"VSCode DevContainer","text":"<p>Spin up the Nautical developer environment using a VsCode DevContainer following these steps.</p> <p>Then simply run <code>nb docs</code> in the terminal.</p> <pre><code>nb docs \n# INFO    -  Building documentation...\n# INFO    -  Cleaning site directory\n# INFO    -  Documentation built in 1.43 seconds\n# INFO    -  [22:52:06] Watching paths for changes: 'docs', 'mkdocs.yml'\n# INFO    -  [22:52:06] Serving on http://127.0.0.1:8000/nautical-backup/\n</code></pre> <p>The <code>nb</code> command comes pre-loaded with the DevContainer.</p>"},{"location":"developers/docs/#docker","title":"Docker","text":"<p>If Docker is already installed on your machine, then running the docs locally is extremely easy.</p> <p>Verify Requirements <pre><code>docker --version\n# Docker version 20.10.22, build 3a2c30b\n\ndocker compose version\n# Docker Compose version v2.15.1\n</code></pre></p> <p>The <code>docs/docker-compose.yml</code> file within the repo already has all the relevant information needed to get the docs up and running. The official Docker image already contains all the requirements</p> Our <code>docker-compose.yml</code> <pre><code>    # This file exists at docs/docker-compose.yml \n    version: \"3\"\n\n    services:\n    mkdocs:\n        image: squidfunk/mkdocs-material:latest\n        container_name: mkdocs\n        hostname: mkdocs\n        command: \"\" #(1)!\n        volumes:\n        - ../:/docs #(2)!\n        ports:\n        - 8000:8000\n        restart: unless-stopped\n</code></pre> <ol> <li>Serve the docs at http://127.0.0.1:8000</li> <li>This works only if we start the container from <code>docs</code> directory.</li> </ol> <p>To start the container simply run the following command: <pre><code>cd docs #(1)!\ndocker compose up\n# [+] Running 1/0\n# - Container mkdocs Created\n# mkdocs  | INFO -  Serving on http://0.0.0.0:8000/\n</code></pre></p> <ol> <li>We need to run the <code>docker compose up</code> command from the <code>docs</code> directory.</li> </ol> <p>MKDocs will now be available at: http://127.0.0.1:8000</p>"},{"location":"developers/docs/#python-and-pip","title":"Python and pip","text":"<p>While the Docker method is the easiest to use, it's still quite simple to setup MKDocs using Python and pip.</p> <p>Material for MkDocs is published as a Python package and can be installed with <code>pip</code>, ideally by using a virtual environment.</p> <ol> <li>Ensure you have Python 3.8 or greater installed:\u00a0    <pre><code>python --version\n# Python 3.10.5\n</code></pre></li> <li>Clone repository to local machine and open in editor (VSCode recommended)</li> <li> <p>Install project plugins/libraries:\u00a0</p> <pre><code>pip install mkdocs-material\n</code></pre> <p>This will automatically install compatible versions of all dependencies:</p> <p>MkDocs, Markdown, Pygments and Python Markdown Extensions.</p> </li> <li> <p>Serve the docs:</p> <p><pre><code>mkdocs serve\n</code></pre>    MKDocs will now be available at: http://127.0.0.1:8000</p> </li> </ol> <p> </p>"},{"location":"developers/env/","title":"Developer Env Variables","text":"<p>These environment variables are not needed for normal installations.</p> <p>This documentation is intended for developers only.</p>"},{"location":"developers/env/#test-mode","title":"Test Mode","text":"<p>For usage of the Nautical scripts outside the container. Useful for running the Unit Tests.</p> <p>Default: -1</p> <pre><code>TEST_MODE=0\n</code></pre>"},{"location":"developers/env/#exit-nautical-after-initialization","title":"Exit Nautical after Initialization","text":"<p>This variable will tell Nautical to immediately quit after initialization--whether a backup is performed or not.</p> <p>Default: false</p> <pre><code>EXIT_AFTER_INIT=true\n</code></pre>"},{"location":"developers/tests/","title":"Tests","text":"<ol> <li>Run the test container</li> </ol> <pre><code>cd tests\ndocker compose run nautical-backup-test4\n</code></pre> <p>You may need to update the paths here to be absolute paths</p> <p>This is a problem with DevContainers</p> <ol> <li>Shell into the container</li> </ol> <pre><code>docker exec -it nautical-backup-test\n</code></pre> <ol> <li>Run the tests</li> </ol> <pre><code>with-contenv bash _tests.sh \n</code></pre> <p><code>with-contenv</code> preserves environment variables</p>"}]}