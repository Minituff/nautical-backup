#!/usr/bin/with-contenv bash

if [ -z "$TEST_MODE" ]; then
    TEST_MODE="false"
fi
export TEST_MODE

if [ "$TEST_MODE" == "true" ]; then
    NAUTICAL_VERSION=Test
    TARGETPLATFORM=TestPlatform
fi

source /app/utils.sh # This also loads the logger

create_new_report_file
logThis "Nautical Backup Version: $NAUTICAL_VERSION" "INFO" "init"
logThis "Built for the platform: $TARGETPLATFORM" "DEBUG" "init"

logThis "Perparing enviornment variables..." "DEBUG" "init"

handle_env() {
  # Export and log this env
  local var_name="$1"
  local var_value="$2"

  logThis "$var_name: $var_value" "DEBUG" "init"
  export_env "$var_name" "$var_value"
}

# ------ Default Variable Values ------ #

# Set default timezone
DEFAULT_TZ="Etc/UTC"
: "${TZ:=$DEFAULT_TZ}"
handle_env TZ "$TZ"

# Default = Every day at 4am
DEFAULT_CRON_SCHEDULE="0 4 * * *"
: "${CRON_SCHEDULE:=$DEFAULT_CRON_SCHEDULE}"
handle_env CRON_SCHEDULE "$CRON_SCHEDULE"

# Path to the Nautical database.
DEFAULT_NAUTICAL_DB_PATH="/config"
: "${NAUTICAL_DB_PATH:=$DEFAULT_NAUTICAL_DB_PATH}"
handle_env NAUTICAL_DB_PATH "$NAUTICAL_DB_PATH"

DEFAULT_NAUTICAL_DB_NAME="nautical-db.json"
: "${NAUTICAL_DB_NAME:=$DEFAULT_NAUTICAL_DB_NAME}"
handle_env NAUTICAL_DB_NAME "$NAUTICAL_DB_NAME"

# Default enable the report file
DEFAULT_REPORT_FILE="true"
: "${REPORT_FILE:=$DEFAULT_REPORT_FILE}"
handle_env REPORT_FILE "$REPORT_FILE"

# Run the backup immediately on start
DEFAULT_BACKUP_ON_START="false"
: "${BACKUP_ON_START:=$DEFAULT_BACKUP_ON_START}"
handle_env BACKUP_ON_START "$BACKUP_ON_START"

# Use the default rsync args "-ahq" (archive, human-readable, quiet)
DEFAULT_USE_DEFAULT_RSYNC_ARGS="true"
: "${USE_DEFAULT_RSYNC_ARGS:=$DEFAULT_USE_DEFAULT_RSYNC_ARGS}"
handle_env USE_DEFAULT_RSYNC_ARGS "$USE_DEFAULT_RSYNC_ARGS"

# Require the Docker Label `nautical-backup.enable=true` to be present on each container or it will be skipped
DEFAULT_REQUIRE_LABEL="false"
: "${REQUIRE_LABEL:=$DEFAULT_REQUIRE_LABEL}"
handle_env REQUIRE_LABEL "$REQUIRE_LABEL"

# Set the default log level to INFO
DEFAULT_LOG_LEVEL="INFO"
: "${LOG_LEVEL:=$DEFAULT_LOG_LEVEL}"
handle_env LOG_LEVEL "$LOG_LEVEL"

# Set the default log level for the report file to INFO
DEFAULT_REPORT_FILE_LOG_LEVEL="INFO"
: "${REPORT_FILE_LOG_LEVEL:=$DEFAULT_REPORT_FILE_LOG_LEVEL}"
handle_env REPORT_FILE_LOG_LEVEL "$REPORT_FILE_LOG_LEVEL"

# Only write to the report file when backups run, not on initialization
DEFAULT_REPORT_FILE_ON_BACKUP_ONLY="true"
: "${REPORT_FILE_ON_BACKUP_ONLY:=$DEFAULT_REPORT_FILE_ON_BACKUP_ONLY}"
handle_env REPORT_FILE_ON_BACKUP_ONLY "$REPORT_FILE_ON_BACKUP_ONLY"

# Mirror the source directory name to the destination directory name
DEFAULT_KEEP_SRC_DIR_NAME="true"
: "${KEEP_SRC_DIR_NAME:=$DEFAULT_KEEP_SRC_DIR_NAME}"
handle_env KEEP_SRC_DIR_NAME "$KEEP_SRC_DIR_NAME"

# Usually combined with BACKUP_ON_START. Essentially, this just exits the container after 1 run.
DEFAULT_EXIT_AFTER_INIT="false"
: "${EXIT_AFTER_INIT:=$DEFAULT_EXIT_AFTER_INIT}"
handle_env EXIT_AFTER_INIT "$EXIT_AFTER_INIT"

# Log the rsync commands to the console (and/or report file)
DEFAULT_LOG_RSYNC_COMMANDS="false"
: "${LOG_RSYNC_COMMANDS:=$DEFAULT_LOG_RSYNC_COMMANDS}"
handle_env LOG_RSYNC_COMMANDS "$LOG_RSYNC_COMMANDS"

# Run the backup only once and then exit (whether it is from CRON or BACKUP_ON_START)
DEFAULT_RUN_ONCE="false"
: "${RUN_ONCE:=$DEFAULT_RUN_ONCE}"
handle_env RUN_ONCE "$RUN_ONCE"

# Do not include a trailing slash
DEFAULT_SOURCE_LOCATION="/app/source"
DEFAULT_DEST_LOCATION="/app/destination"
: "${SOURCE_LOCATION:=$DEFAULT_SOURCE_LOCATION}"
: "${DEST_LOCATION:=$DEFAULT_DEST_LOCATION}"
handle_env SOURCE_LOCATION "$SOURCE_LOCATION"
handle_env DEST_LOCATION "$DEST_LOCATION"

# Test directories
DEFAULT_TEST_MODE="false"
: "${TEST_MODE:=$DEFAULT_TEST_MODE}"
handle_env TEST_MODE "$TEST_MODE"

# Run a curl request before the backup starts
DEFAULT_PRE_BACKUP_CURL=""
: "${PRE_BACKUP_CURL:=$DEFAULT_PRE_BACKUP_CURL}"
handle_env PRE_BACKUP_CURL "$PRE_BACKUP_CURL"

DEFAULT_POST_BACKUP_CURL=""
: "${POST_BACKUP_CURL:=$DEFAULT_POST_BACKUP_CURL}"
handle_env POST_BACKUP_CURL "$POST_BACKUP_CURL"

DEFAULT_HTTP_REST_API_ENABLED="true"
DEFAULT_HTTP_REST_API_USERNAME="admin"
DEFAULT_HTTP_REST_API_PASSWORD="password"
: "${HTTP_REST_API_ENABLED:=$DEFAULT_HTTP_REST_API_ENABLED}"
: "${HTTP_REST_API_USERNAME:=$DEFAULT_HTTP_REST_API_USERNAME}"
: "${HTTP_REST_API_PASSWORD:=$DEFAULT_HTTP_REST_API_PASSWORD}"
handle_env HTTP_REST_API_ENABLED "$HTTP_REST_API_ENABLED"
handle_env HTTP_REST_API_USERNAME "$HTTP_REST_API_USERNAME"
logThis "HTTP_REST_API_PASSWORD: *******" "DEBUG" "init"
export_env HTTP_REST_API_PASSWORD "$HTTP_REST_API_PASSWORD"

# ------ Default Empty Values------ #

DEFAULT_SKIP_CONTAINERS=""
: "${SKIP_CONTAINERS:=$DEFAULT_SKIP_CONTAINERS}"
handle_env SKIP_CONTAINERS "$SKIP_CONTAINERS"

DEFAULT_SKIP_STOPPING=""
: "${SKIP_STOPPING:=$DEFAULT_SKIP_STOPPING}"
handle_env SKIP_STOPPING "$SKIP_STOPPING"

DEFAULT_RSYNC_CUSTOM_ARGS=""
: "${RSYNC_CUSTOM_ARGS:=$DEFAULT_RSYNC_CUSTOM_ARGS}"
handle_env RSYNC_CUSTOM_ARGS "$RSYNC_CUSTOM_ARGS"

DEFAULT_OVERRIDE_SOURCE_DIR=""
: "${OVERRIDE_SOURCE_DIR:=$DEFAULT_OVERRIDE_SOURCE_DIR}"
handle_env OVERRIDE_SOURCE_DIR "$OVERRIDE_SOURCE_DIR"

DEFAULT_OVERRIDE_DEST_DIR=""
: "${OVERRIDE_DEST_DIR:=$DEFAULT_OVERRIDE_DEST_DIR}"
handle_env OVERRIDE_DEST_DIR "$OVERRIDE_DEST_DIR"

DEFAULT_ADDITIONAL_FOLDERS=""
: "${ADDITIONAL_FOLDERS:=$DEFAULT_ADDITIONAL_FOLDERS}"
handle_env ADDITIONAL_FOLDERS "$ADDITIONAL_FOLDERS"

DEFAULT_ADDITIONAL_FOLDERS_WHEN="before"
: "${DEFAULT_ADDITIONAL_FOLDERS_WHEN:=$DEFAULT_ADDITIONAL_FOLDERS_WHEN}"
handle_env DEFAULT_ADDITIONAL_FOLDERS_WHEN "$DEFAULT_ADDITIONAL_FOLDERS_WHEN"



# ----- Variables Requiring Logic ----- #

if [ "$TEST_MODE" == "true" ]; then
    SOURCE_LOCATION=$DEFAULT_TEST_SOURCE_LOCATION
    DEST_LOCATION=$DEFAULT_TEST_DEST_LOCATION
else
    SOURCE_LOCATION=$DEFAULT_SOURCE_LOCATION
    DEST_LOCATION=$DEFAULT_DEST_LOCATION
fi
handle_env SOURCE_LOCATION "$SOURCE_LOCATION"
handle_env DEST_LOCATION "$DEST_LOCATION"


# Get the container ID of the current container
SELF_CONTAINER_ID=$(cat /proc/self/cgroup | grep 'docker' | sed 's/^.*\///' | tail -n1)
handle_env SELF_CONTAINER_ID "$SELF_CONTAINER_ID"
